{
	"info": {
		"_postman_id": "c311309b-4bae-4805-8fca-8e0063b6b95f",
		"name": "Functional Tests - Scenarios",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup Base Data",
			"item": [
				{
					"name": "Cleanup data - clear customizations",
					"item": [
						{
							"name": "Clear Seller Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9eca356-123f-47b4-9eb3-9d6891117447",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.admin.Seller\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Customer Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23024aa1-2c37-4068-addf-532afa2d653b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.crm.Customer\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Customer Account Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8964fc07-4932-4b16-a384-3aaadd3d8f95",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.payments.CustomerAccount\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Billing Account Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd1a0e54-c59e-49e3-adce-bc21963ea0fb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.BillingAccount\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear User Account Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef20fa2f-fec1-445e-8250-959e5e56e154",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.UserAccount\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Subscription Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa01de12-79d8-459c-8fe4-8a1e04f868d4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.Subscription\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Access Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75b31b1b-94d2-46c3-83b4-20921408e25d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.mediation.Access\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Provider Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c66ff2f2-7b92-4615-952e-35c07b5bf211",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.crm.Provider\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Product Template Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b364629-5a89-4dcc-8c39-5267babab3bb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.ProductTemplate\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Product Instance Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "073aa4ee-ed1d-453c-8b5f-24625cd0f246",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.ProductInstance\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Service Template Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cda500c-72dc-4aab-91d2-7896d0ebc3ad",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.ServiceTemplate\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Offer Template  Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b6c8f7e-70d5-441e-9162-fb875ae220b7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.OfferTemplate\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Charge Template  Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2aba3a38-ce56-4937-9680-52763b734d25",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.ChargeTemplate\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Price Plan Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "302e2102-3db3-40f6-915b-f1f9bab15ccb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.PricePlanMatrix\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Invoice Category Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e0da679-5204-4492-9319-dce622735858",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.InvoiceCategory\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Invoice SubCategory Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44d32c16-884e-46d7-b045-68d2da190f1e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.payments.AccountOperation\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Account Operation Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fd6c160-2692-4f85-b2df-f33286682af4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.InvoiceSubCategory\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Invoice Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9afaeda-2422-4f17-ad57-2e125f4c2269",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.Invoice\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Tax Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3d9b4f3-80de-42c5-8911-095dfced164f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.Tax\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Billing Cycle Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d282339-d2f6-41e8-920b-4f1ef404e230",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.BillingCycle\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Purge Job Customization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68b09c5c-8cde-434e-9983-82565b76477b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"classname\": \"org.meveo.admin.job.PurgeJob\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/customize",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"customize"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clean up data - restore provider and configuration",
					"item": [
						{
							"name": "Update provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5adef896-21e8-4e76-96a0-2282ae4eea40",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"demo\",\r\n    \"currency\": \"AFA\",\r\n    \"country\": \"AD\",\r\n    \"language\": \"DEU\",\r\n    \"multiCurrency\": \"true\",\r\n    \"multiCountry\": \"true\",\r\n    \"multiLanguage\": \"true\",\r\n    \"enterprise\": \"true\",\r\n    \"levelDuplication\": \"false\",\r\n    \"rounding\": \"8\",\r\n    \"invoiceRounding\": \"2\",\r\n    \"prepaidReservationExpirationDelayinMillisec\": \"60000\",\r\n    \"bankCoordinates\": {\r\n        \"bankCode\": \"SGMB\",\r\n        \"branchCode\": \"12345\",\r\n        \"accountNumber\": \"33333333333\",\r\n        \"key\": \"11\",\r\n        \"iban\": \"11\",\r\n        \"bic\": \"11\",\r\n        \"accountOwner\": \"owner\",\r\n        \"bankName\": \"SGMB\",\r\n        \"bankId\": \"11\",\r\n        \"issuerNumber\": \"1111\",\r\n        \"issuerName\": \"DEMO\"\r\n    },\r\n    \"recognizeRevenue\": \"false\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"false\",\r\n        \"displayProvider\": \"false\",\r\n        \"displayCfAsXML\": \"false\",\r\n        \"displayPricePlans\": \"false\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayBillingCycle\": \"false\",\r\n        \"displayFreeTransacInInvoice\": \"true\",\r\n        \"displayOrders\": \"false\",\r\n        \"displayWalletOperations\": \"false\"\r\n    }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/provider",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"provider"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set securedEntities=false - AUTHORIZATION_SUPERADMIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f151c67-08cc-4865-8fec-e7afd838ac78",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.superpassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.superusername}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuc3VwZXJhZG1pbjpvcGVuY2VsbC5zdXBlcmFkbWlu"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"properties\": [\n        {\n            \"key\": \"secured.entities.enabled\",\n            \"value\": \"false\"\n        }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/configurations/properties",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"configurations",
										"properties"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set service.allowMultiInstantiation=false - AUTHORIZATION_SUPERADMIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bab07a6-065a-419f-9083-f03524b14b72",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.superpassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.superusername}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuc3VwZXJhZG1pbjpvcGVuY2VsbC5zdXBlcmFkbWlu"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"properties\": [\n        {\n            \"key\": \"service.allowMultiInstantiation\",\n            \"value\": \"false\"\n        }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/configurations/properties",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"configurations",
										"properties"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clean up data - user and ES",
					"item": [
						{
							"name": "Restore User to default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de839532-ac94-4cc6-931a-1fe585bef5e0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{opencell.username}}\",\r\n    \"password\": \"{{opencell.password}}\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\"administrateur\"],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean and reindex Full text - AUTHORIZATION_SUPERADMIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14c0c631-c336-4a70-92a9-41dc7650467e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.superpassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.superusername}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuc3VwZXJhZG1pbjpvcGVuY2VsbC5zdXBlcmFkbWlu"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filteredList/reindex",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filteredList",
										"reindex"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Setup Configuration: InvType, BC and Seller",
					"item": [
						{
							"name": "Create InvoiceType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fa313aa-c5d2-4077-a700-8f1ac0cf8260",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_TEST-Type\",\r\n\t\"description\": \"Invoice Test Type\",\r\n\t\"occTemplateCode\": \"INV_STD\",\r\n\t\"sequenceDto\": {\r\n\t\t\"prefixEL\": \"Fact_\",\r\n\t\t\"sequenceSize\": \"9\"\r\n\t},\r\n\t\"matchingAuto\": \"false\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create BillingCycle",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35acb2ad-e596-421c-879e-1a9b3cd4ae90",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"CYC_INV_MT_1\",\r\n\t\"description\": \"Monthly Invoice Cycle 1\",\r\n\t\"transactionDateDelay\": \"0\",\r\n\t\"invoiceDateProductionDelay\": \"0\",\r\n\t\"dueDateDelay\": \"2\",\r\n\t\"invoiceDateDelay\": \"4\",\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"invoiceTypeCode\": \"{{baseEntityPrefix}}_TEST-Type\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billingCycle",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create BillingCycle 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e84fa0cc-b6c9-44d1-b4a8-a552e4351500",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"CYC_INV_MT_3\",\r\n\t\"description\": \"Monthly Invoice Cycle 3\",\r\n\t\"transactionDateDelay\": \"0\",\r\n\t\"invoiceDateProductionDelay\": \"0\",\r\n\t\"dueDateDelay\": \"2\",\r\n\t\"invoiceDateDelay\": \"4\",\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"dueDateDelayEL\": \"#{ba.id + invoice.billingAccount.id}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billingCycle",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Seller",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c4ac57b-490c-41be-a0d7-c42cec218d7e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    {\r\n    \t\"code\": \"SELLER_FR\",\r\n    \t\"description\": \"France Seller\",\r\n    \t\"currencyCode\": \"EUR\",\r\n    \t\"languageCode\": \"FRA\",\r\n    \t\"parentSeller\": \"MAIN_SELLER\",\r\n    \t\"invoiceTypeSequences\": {\r\n    \t\t\"{{baseEntityPrefix}}_TEST-Type\": {\r\n    \t\t\t\"prefixEL\": \"SellFact_\",\r\n    \t\t\t\"sequenceSize\": 9,\r\n    \t\t\t\"currentInvoiceNb\": 9\r\n    \t\t}\r\n    \t}\r\n    }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update InvoiceType COM Sequence",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a566e2d-3a85-47fc-bbae-685fe4f65112",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"COM\",\n    \"occTemplateCode\": \"INV_STD\",\n    \"sequenceDto\": {\n        \"prefixEL\": \"COM_\",\n        \"sequenceSize\": \"9\"\n    },\n    \"matchingAuto\": \"false\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Setup Catalog: Charges, Services, Offer, PP, Counters, Wallets",
					"item": [
						{
							"name": "Create Tax Class 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3f89bd6-ac69-433a-b24d-e6f6741ecc66",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_taxClass\",\r\n    \"description\": \"Tax class for {{baseEntityPrefix}}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/taxClass/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"taxClass",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Tax Class 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e086dd8f-1e3e-470b-9b0f-e63278aa6d58",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_taxClass2\",\r\n    \"description\": \"Tax class for {{baseEntityPrefix}} 2\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/taxClass/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"taxClass",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Tax Mapping",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3387be6d-788b-4350-aed2-4434bca3fa7e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"accountTaxCategoryCode\": \"STANDARD\",\r\n    \"chargeTaxClassCode\": \"{{baseEntityPrefix}}_taxClass\",\r\n    \"taxCode\": \"TAX_18\",\r\n    \"validFrom\":\"{{valid_from}}\",\r\n    \"validTo\":\"{{validTo}}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/taxMapping/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"taxMapping",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Tax Category 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da405005-41dc-49b4-8594-feb14b6be80e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\":\"{{baseEntityPrefix}}_taxCategory2\",\r\n\t\"description\":\"Tax category 2\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/taxCategory/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"taxCategory",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create PrepaidWallet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6932444f-5de2-426a-85fe-b700cb59bb36",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PPW1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_PrepaidPWallet_Description\",\r\n\t\"walletType\": \"PREPAID\",\r\n\t\"consumptionAlertSet\": \"false\",\r\n\t\"fastRatingLevel\": \"1\",\r\n\t\"lowBalanceLevel\": \"2\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/wallet/template/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"wallet",
										"template",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Counter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac9f1cb7-d765-4285-9783-88683acc6749",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_CT1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_CounterTemplate_Description\",\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"unity\": \"Quantity\",\r\n\t\"type\": \"USAGE\",\r\n\t\"ceiling\": \"1\",\r\n\t\"disabled\": \"false\",\r\n\t\"counterLevel\": \"BA\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/counterTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"counterTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create TriggeredEDR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208b942b-5d00-45e9-a98a-fb64fe7309fe",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_EDR1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_Triggered_EDR_DESC\",\r\n\t\"quantityEl\": \"#{op.amountWithoutTax}\",\r\n\t\"param1El\": \"#{edr.parameter1}\",\r\n\t\"param2El\": \"#{edr.parameter2}\",\r\n\t\"param3El\": \"#{edr.parameter3}\",\r\n\t\"param4El\": \"#{edr.parameter4}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/triggeredEdr/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"triggeredEdr",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Recurring",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13d9e252-72d8-4cc7-b0bf-fcc92413f70a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"true\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"subscriptionProrata\": \"true\",\r\n\t\"terminationProrata\": \"true\",\r\n\t\"applyInAdvance\": \"true\",\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"durationTermInMonth\": \"4\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n\t\"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create OneShot - Subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4005892-1d8b-4659-8b45-f05414d33014",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"true\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\r\n\t\"immediateInvoicing\": \"false\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"oneShotChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create OneShot - Termination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9881233a-47a5-4ff2-8c79-08bea37a2e55",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Termination Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"oneShotChargeTemplateType\": \"TERMINATION\",\r\n\t\"immediateInvoicing\": \"false\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"oneShotChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create OneShot - Other",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48db5e47-bc16-48a7-8e35-895ebceba286",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n    \"description\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"true\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}s-Forfait Test\"\r\n        }\r\n    ],\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"oneShotChargeTemplateType\": \"OTHER\",\r\n    \"immediateInvoicing\": \"false\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"oneShotChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Usage 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbbe3061-5ef4-4871-9c29-da81c15ed3f3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"Unit\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"filterParam1\": \"USAGE\",\r\n\t\"priority\": \"1\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"filterExpression\": \"#{ci.chargeTemplate.code.equals('{{baseEntityPrefix}}_USAGE1')}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"usageChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Service 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e608a189-8237-4cfc-8e11-cafab7dff61d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\"invoicingCalendar\": \"MONTHLY\",\r\n\t\"serviceChargeTemplateRecurrings\": {\r\n\t\t\"serviceChargeTemplateRecurring\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_REC1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateSubscriptions\": {\r\n\t\t\"serviceChargeTemplateSubscription\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_OS1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateTerminations\": {\r\n\t\t\"serviceChargeTemplateTermination\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_OST1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateUsages\": {\r\n\t\t\"serviceChargeTemplateUsage\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Service 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a226d79c-fd4f-49be-9fd0-a732a021f982",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n    \"description\": \"{{baseEntityPrefix}}_SERVICE2\",\n    \"invoicingCalendar\": \"MONTHLY\",\n    \"serviceChargeTemplateRecurrings\": {\n        \"serviceChargeTemplateRecurring\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_REC1\"\n            }\n        ]\n    },\n    \"serviceChargeTemplateUsages\": {\n        \"serviceChargeTemplateUsage\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_USAGE1\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product Charge 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33266e08-3ee8-4a8b-9324-73e750a20c7d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_PC1\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Produit Test\"\r\n        }\r\n    ],\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n    \"triggeredEdrs\": {\r\n        \"triggeredEdr\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalogManagement/productChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalogManagement",
										"productChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product Charge 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1ec47f5-1987-4601-802b-4f79d1a1045c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC2\",\r\n    \"description\": \"{{baseEntityPrefix}}_PC2\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Produit 2 Test\"\r\n        }\r\n    ],\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalogManagement/productChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalogManagement",
										"productChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b818bbdd-3532-41cd-b169-8b80199ea837",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PRODUCT1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_PRODUCT1 DESC\",\r\n\t\"name\": \"{{baseEntityPrefix}}_PRODUCT1 NAME\",\r\n\t\"productChargeTemplate\": [\r\n\t\t{\r\n\t\t\t\"code\": \"{{baseEntityPrefix}}_PC1\",\r\n\t\t\t\"disabled\": \"false\"\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalogManagement/productTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalogManagement",
										"productTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e23e6c59-1c67-4b82-a1b2-f5afe599def3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_PRODUCT2 DESC\",\r\n\t\"name\": \"{{baseEntityPrefix}}_PRODUCT1 NAME\",\r\n\t\"productChargeTemplate\": [\r\n        {\r\n\t\t\t\"code\": \"{{baseEntityPrefix}}_PC2\",\r\n\t\t\t\"disabled\": \"false\"\r\n\t\t}\r\n\t]\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalogManagement/productTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalogManagement",
										"productTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Offer 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc5a24a1-a5e0-464d-81ef-b9816c45ee52",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"disabled\": \"false\",\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\"\r\n            }\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\"\r\n            }\r\n        }\r\n    ],\r\n    \"offerProductTemplate\": [\r\n        {\r\n            \"productTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_PRODUCT1\"\r\n            }\r\n        }\r\n    ],\r\n    \"lifeCycleStatus\": \"ACTIVE\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ScriptInstance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a16691a0-3a2a-46f0-9c91-05d4443e5532",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"org.meveo.service.script.rating.RatingScript\",\n    \"description\": \"rating script\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script.rating;\\r\\n\\r\\nimport java.math.BigDecimal;\\r\\nimport java.util.Map;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.billing.WalletOperation;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\npublic class RatingScript extends Script {\\r\\n\\r\\n    private static final Logger log = LoggerFactory.getLogger(RatingScript.class);\\r\\n\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.debug(\\\"Rating script creation script...\\\");\\r\\n        // DO not change any amount, as it is untestable\\r\\n        //WalletOperation op = (WalletOperation) context.get(Script.CONTEXT_ENTITY);\\r\\n        //op.setAmountWithoutTax(op.getAmountTax().add(BigDecimal.ONE));\\r\\n    }\\r\\n}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"scriptInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Plan  Recurring",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26681e90-957d-4bfe-9029-4c955a38ac5a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"amountWithoutTax\": \"10\",\r\n\t\"amountWithTax\": \"12\",\r\n\t\"scriptInstance\": \"org.meveo.service.script.rating.RatingScript\",\r\n\t\"priority\": \"1\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Plan OneShot - Subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a85213c7-edd8-4ad3-8ef2-305a1a2a09cb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"amountWithoutTax\": \"11\",\r\n\t\"amountWithTax\": \"15\",\r\n\t\"priority\": \"1\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Plan OneShot - Termination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09275f49-b4b4-424d-b79c-ea3a6d997acf",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"amountWithoutTax\": \"21\",\r\n\t\"amountWithTax\": \"25\",\r\n\t\"priority\": \"1\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Plan OneShot - Other",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa4576b6-d16b-4d1c-95a3-ff357a1a7d87",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n\t\"amountWithoutTax\": \"11\",\r\n\t\"amountWithTax\": \"15\",\r\n\t\"priority\": \"1\",\r\n\t\"woDescriptionEL\": \"#{\\\"Special \\\".concat(op.description)}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Plan Usage 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad0f2acd-e41f-4cd5-9a0e-3d2794d07585",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"amountWithoutTax\": \"9\",\r\n\t\"amountWithTax\": \"14\",\r\n\t\"priority\": \"1\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Plan Product 1 in Offer 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea70f9c5-2334-450e-ba1c-dc3ca7ce0bd9",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PC1_PP2\",\r\n\t\"description\": \"price plan product 1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_PC1\",\r\n\t\"amountWithoutTax\": \"0.5\",\r\n\t\"amountWithTax\": \"0.6\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n\t\"priority\": \"1\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Plan Product 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "204264bd-f25a-4806-83eb-d4159b8c8142",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PC1_PP\",\r\n\t\"description\": \"price plan product 1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_PC1\",\r\n\t\"amountWithoutTax\": \"1\",\r\n\t\"amountWithTax\": \"1.2\",\r\n\t\"priority\": \"2\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Plan Product 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f021624-01e4-4f15-bf9d-da73dfaa1997",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PC2_PP\",\r\n\t\"description\": \"price plan product 1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_PC2\",\r\n\t\"amountWithoutTax\": \"5\",\r\n\t\"amountWithTax\": \"6\",\r\n\t\"priority\": \"1\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Reccuring 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7fe1eaf-22f1-4132-8cfe-42a3466c24e7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC2\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"subscriptionProrata\": \"true\",\r\n\t\"terminationProrata\": \"true\",\r\n\t\"applyInAdvance\": \"true\",\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"durationTermInMonth\": \"4\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Recurring 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea0e206c-6561-4586-ad0e-5363e5defbf6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"subscriptionProrata\": \"true\",\r\n\t\"terminationProrata\": \"true\",\r\n\t\"applyInAdvance\": \"true\",\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"durationTermInMonth\": \"4\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create OneShot 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "392e4066-4378-40eb-be34-02c8358b9387",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OS2\",\r\n    \"description\": \"{{baseEntityPrefix}}_OS2\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n        }\r\n    ],\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\r\n    \"immediateInvoicing\": \"false\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n    \"triggeredEdrs\": {\r\n        \"triggeredEdr\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"oneShotChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create OneShot 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6a297e8-d63c-406b-812e-1edcb7a37728",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OS3\",\r\n    \"description\": \"{{baseEntityPrefix}}_OS3\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n        }\r\n    ],\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\r\n    \"immediateInvoicing\": \"false\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n    \"triggeredEdrs\": {\r\n        \"triggeredEdr\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"oneShotChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Usage 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce8dd38e-7a6b-417d-ad47-63cfe8b06fac",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"Unit\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"filterParam1\": \"USAGE\",\r\n\t\"priority\": \"1\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n} ",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"usageChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Usage 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f2392a8-cee2-46b8-9a09-bc4d1d67d396",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"Unit\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"filterParam1\": \"USAGE3\",\r\n\t\"priority\": \"2\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"filterExpression\": \"#{ci.chargeTemplate.code.equals('NO_MATCH')}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"usageChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Service 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4df7fe7a-e58a-497f-95ff-d0d7c49f8ed0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n\t\"invoicingCalendar\": \"MONTHLY\",\r\n\t\"serviceChargeTemplateRecurrings\": {\r\n\t\t\"serviceChargeTemplateRecurring\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_REC3\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateSubscriptions\": {\r\n\t\t\"serviceChargeTemplateSubscription\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_OS3\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateUsages\": {\r\n\t\t\"serviceChargeTemplateUsage\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Service 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01ebcbaf-6b5a-4822-8b55-b4c141bee693",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_SERVICE4\",\r\n\t\"description\": \"{{baseEntityPrefix}}_SERVICE4\",\r\n\t\"invoicingCalendar\": \"MONTHLY\",\r\n\t\"serviceChargeTemplateUsages\": {\r\n\t\t\"serviceChargeTemplateUsage\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Offer 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "838a7a38-6420-4529-825b-69f34f491ead",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"disabled\": \"false\",\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\"\r\n            }\r\n        \r\n        }\r\n    ],\r\n    \"lifeCycleStatus\": \"ACTIVE\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Offer 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23777e31-a1c7-45f7-bb67-b26dd8d90ffb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"disabled\": \"false\",\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\"\r\n            }\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE4\"\r\n            }\r\n        }\r\n    ],\r\n    \"lifeCycleStatus\": \"ACTIVE\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Plan Usage 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32be71f1-c145-43ea-98ca-64b6ba890b6e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"amountWithoutTax\": \"1\",\r\n\t\"amountWithTax\": \"1.2\",\r\n\t\"priority\": \"1\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Plan  Usage 1 in Offer 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49084662-0c7b-489f-9858-d8a47a5db16f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE1_OF2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\r\n\t\"amountWithoutTax\": \"0\",\r\n\t\"amountWithTax\": \"0\",\r\n\t\"priority\": \"0\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Plan OneShot OS3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfccd04d-5c73-4511-bf8f-b67716a1aaf4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS3\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OS3\",\r\n\t\"amountWithoutTax\": \"11\",\r\n\t\"amountWithTax\": \"15\",\r\n\t\"priority\": \"1\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Plan Recurring 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b21f612f-4ba5-4cc4-8dcd-3b2e725340b8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"amountWithoutTax\": \"10\",\r\n\t\"amountWithTax\": \"12\",\r\n\t\"priority\": \"1\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Plan usage 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77bccc6f-07a3-4b31-a008-0dba6d26e282",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE3_OF2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE3_OF2\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\r\n\t\"amountWithoutTax\": \"1\",\r\n\t\"amountWithTax\": \"1.2\",\r\n\t\"priority\": \"1\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Bundle 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fcb306ca-df0d-4533-a619-2d8538b26a7d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BUNDLE1\",\r\n    \"description\": \"Bundle 1\",\r\n    \"productChargeTemplates\": {\r\n        \"productChargeTemplate\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_PC2\"\r\n            }\r\n        ]\r\n    },\r\n    \"bundleProducts\": {\r\n        \"bundleProduct\": {\r\n            \"productTemplate\": [\r\n                {\r\n                    \"code\": \"{{baseEntityPrefix}}_PRODUCT1\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/bundleTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"bundleTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create channel - WEB",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efc23bcd-f6f7-4e29-989a-675066a613da",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_CHANNEL_WEB\",\r\n\t\"description\": \"{{baseEntityPrefix}}_CHANNEL_WEB\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"channel",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create channel - SOCIAL_MEDIA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e5ef7a5-3ca9-41bd-9baf-d6117352063d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_CHANNEL_WEB\",\r\n\t\"description\": \"{{baseEntityPrefix}}_CHANNEL_WEB\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"channel",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Offer Category - SOFTWARE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c3751d7-3480-40d3-a204-c210751c1c4e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"description\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"name\": \"{{baseEntityPrefix}}_DISK_SPACE\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplateCategory/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplateCategory",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Offer Category - DISK_SPACE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6be6dca-acd2-4712-b874-1e5227816dd7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"description\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"name\": \"{{baseEntityPrefix}}_DISK_SPACE\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplateCategory/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplateCategory",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Setup Customer accounts, subscription, access",
					"item": [
						{
							"name": "Create Customer 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f20d255-63c9-4b40-8647-fb43a3de2bd1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"description\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"seller\": \"SELLER_FR\",\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"+33100000000\",\r\n        \"mobile\": \"+33666666666\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Customer 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "30c403d4-6b18-4c06-bcfe-36541107cf3c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CUST_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_CUST_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"seller\": \"SELLER_FR\",\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"+33100000000\",\r\n        \"mobile\": \"+33666666666\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Customer 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d131496-1ea1-405e-89d2-1947538c52cb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"seller\": \"SELLER_FR\",\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"+33100000000\",\r\n        \"mobile\": \"+33666666666\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Customer Account 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff360337-6981-4108-b7cc-80cbe1e81223",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CA\",\r\n    \"description\": \"{{baseEntityPrefix}}_CA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"1234\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"methodOfPayment\": [\r\n        {\r\n            \"paymentMethodType\": \"CHECK\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Customer Account 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d0736c5-a8d1-4bbf-aac4-a30f16181895",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CA_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_CA_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"1234\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST_2\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"methodOfPayment\": [\r\n        {\r\n            \"paymentMethodType\": \"CHECK\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Customer Account 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c89291bd-7996-4865-b5ae-2d5d157ae529",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CA_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_CA_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"1234\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"methodOfPayment\": [\r\n        {\r\n            \"paymentMethodType\": \"CHECK\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Billing Account 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d369f6f-9c32-4634-bd15-b27a2190e77b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BA\",\r\n    \"description\": \"{{baseEntityPrefix}}_BA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2015-04-01\",\r\n    \"subscriptionDate\": \"2015-01-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"email\": \"{{baseEntityPrefix}}@manaty.net\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Billing Account 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61853f36-ed2f-46a5-ae20-9a672ac7c44c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BA_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_BA_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA_2\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2015-04-01\",\r\n    \"subscriptionDate\": \"2015-01-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"email\": \"{{baseEntityPrefix}}@manaty.net\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Billing Account 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25d6bfe8-0e24-44ad-b235-12ff0680ff16",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BA_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_BA_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA_3\",\r\n    \"billingCycle\": \"CYC_INV_MT_3\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2015-04-01\",\r\n    \"subscriptionDate\": \"2015-01-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"email\": \"{{baseEntityPrefix}}@manaty.net\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User Account 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6745f0c9-d48b-454f-a12d-226ddacc6561",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_UA\",\r\n    \"description\": \"{{baseEntityPrefix}}_UA\",\r\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User Account 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "308ffe9e-d3f4-4c7f-8a23-2be2d3d8a063",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_UA_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_UA_2\",\r\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User Account 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07a09060-cef5-4828-9ef3-99f5146fbe6b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9ed25df-e63f-486e-bb21-2a93ac69061b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_SUB\",\r\n    \"description\": \"{{baseEntityPrefix}}_SUB\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Access",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f99e03a3-b452-41b9-8606-5d66ef650210",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_ACCP\",\r\n    \"subscription\": \"{{baseEntityPrefix}}_SUB\",\r\n    \"startDate\": \"2016-06-01\",\r\n    \"endDate\": \"2016-06-30\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/access/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"access",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Setup Administration: Measurable Qtt,Charts, Notifications, etc..",
					"item": [
						{
							"name": "create MeasurableQuantities",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3478df55-2eff-4aa8-9b1e-8acd803b9f17",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_MQ1\",\r\n    \"description\": \"{{baseEntityPrefix}}_MQ1-DESC\",\r\n    \"dimension1\": \"1\",\r\n    \"dimension2\": \"2\",\r\n    \"dimension3\": \"3\",\r\n    \"dimension4\": \"4\",\r\n    \"editable\": \"false\",\r\n    \"additive\": \"true\",\r\n    \"sqlQuery\": \"select count(*) from billing_subscription where status='CREATED' and date(created)='#{date}'\",\r\n    \"measurementPeriod\": \"MONTHLY\",\r\n    \"lastMeasureDate\": \"2016-03-16\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/measurableQuantity",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"measurableQuantity"
									]
								}
							},
							"response": []
						},
						{
							"name": "create BarChart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee70cb67-6af4-4bb7-a7f8-0645cb7eb078",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_BarCharts\",\r\n    \"measurableQuantity\": {\r\n        \"code\": \"{{baseEntityPrefix}}_MQ1\"\r\n    },\r\n    \"width\": \"100\",\r\n    \"height\": \"100\",\r\n    \"style\": \"test1\",\r\n    \"styleClass\": \"test1\",\r\n    \"extender\": \"test1\",\r\n    \"visible\": \"true\",\r\n    \"legendPosition\": \"n\",\r\n    \"barPadding\": \"100\",\r\n    \"barMargin\": \"100\",\r\n    \"orientation\": \"vertical\",\r\n    \"stacked\": \"true\",\r\n    \"min\": \"100\",\r\n    \"max\": \"100\",\r\n    \"breakOnNull\": \"false\",\r\n    \"xaxisLabel\": \"test\",\r\n    \"yaxisLabel\": \"test\",\r\n    \"xaxisAngle\": \"10\",\r\n    \"yaxisAngle\": \"10\",\r\n    \"legendCols\": \"20\",\r\n    \"legendRows\": \"20\",\r\n    \"zoom\": \"true\",\r\n    \"animate\": \"true\",\r\n    \"showDataTip\": \"true\",\r\n    \"datatipFormat\": \"false\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/chart/bar",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"chart",
										"bar"
									]
								}
							},
							"response": []
						},
						{
							"name": "create PieChart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3a98106-0f00-49ae-9cbf-4730c7a7242e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_PieCharts\",\r\n    \"measurableQuantity\": {\r\n        \"code\": \"{{baseEntityPrefix}}_MQ1\"\r\n    },\r\n    \"width\": \"123\",\r\n    \"height\": \"123\",\r\n    \"style\": \"style1\",\r\n    \"styleClass\": \"style_class1\",\r\n    \"extender\": \"extender1\",\r\n    \"visible\": \"true\",\r\n    \"filled\": \"false\",\r\n    \"legendPosition\": \"n\",\r\n    \"diameter\": \"120\",\r\n    \"sliceMargin\": \"10\",\r\n    \"shadow\": \"true\",\r\n    \"showDataLabels\": \"false\",\r\n    \"legendCols\": \"23\",\r\n    \"legendRows\": \"23\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/chart/pie",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"chart",
										"pie"
									]
								}
							},
							"response": []
						},
						{
							"name": "create LineChart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13636825-054f-4db8-b685-66aeb96eac58",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_LC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_LineCharts\",\r\n    \"measurableQuantity\": {\r\n        \"code\": \"{{baseEntityPrefix}}_MQ1\"\r\n    },\r\n    \"width\": \"200\",\r\n    \"height\": \"200\",\r\n    \"style\": \"style1\",\r\n    \"styleClass\": \"styleClass2\",\r\n    \"extender\": \"extender3\",\r\n    \"visible\": \"true\",\r\n    \"filled\": \"false\",\r\n    \"legendPosition\": \"w\",\r\n    \"shadow\": \"true\",\r\n    \"minX\": \"45\",\r\n    \"maxX\": \"45\",\r\n    \"minY\": \"45\",\r\n    \"maxY\": \"45\",\r\n    \"breakOnNull\": \"true\",\r\n    \"xaxisLabel\": \"label 1\",\r\n    \"yaxisLabel\": \"label 2\",\r\n    \"xaxisAngle\": \"12\",\r\n    \"yaxisAngle\": \"12\",\r\n    \"stacked\": \"true\",\r\n    \"zoom\": \"true\",\r\n    \"animate\": \"false\",\r\n    \"showDataTip\": \"false\",\r\n    \"datatipFormat\": \"false\",\r\n    \"legendCols\": \"56\",\r\n    \"legendRows\": \"56\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/chart/line",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"chart",
										"line"
									]
								}
							},
							"response": []
						},
						{
							"name": "create ScriptInstance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d136980-04ec-41bc-ad03-81bcf277542b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\",\n    \"description\": \"{{baseEntityPrefix}}_Script_Instance\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;           \\r\\n            import java.util.Map;\\r\\n            import java.math.BigDecimal;\\r\\n            import org.meveo.admin.exception.BusinessException;\\r\\n            import org.meveo.model.admin.User;\\r\\n            import org.meveo.model.crm.Provider;\\r\\n            import org.slf4j.Logger;\\r\\n            import org.slf4j.LoggerFactory;         \\r\\n            public class {{baseEntityPrefix}}_Script extends Script {             \\r\\n                private static final Logger log = LoggerFactory.getLogger({{baseEntityPrefix}}_Script.class);\\r\\n                public void execute(Map<String,Object> context) throws BusinessException{\\r\\n                    log.debug(\\\\\\\"{{baseEntityPrefix}}_Script creation script...\\\\\\\");\\r\\n                    log.debug(\\\\\\\"{{baseEntityPrefix}}_Script creation script.\\\\\\\");\\r\\n                }\\r\\n            }\",\n    \"executionRoles\": [\n        {\n            \"name\": \"administrateur\"\n        }\n    ],\n    \"sourcingRoles\": [\n        {\n            \"name\": \"administrateur\"\n        }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"scriptInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "create Notifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d09347fb-ed7c-4136-a6e4-9372820d8ee6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_Notification1\",\r\n    \"classNameFilter\": \"org.meveo.model.crm.Customer\",\r\n    \"eventTypeFilter\": \"CREATED\",\r\n    \"elFilter\": \"#{event.code.startsWith('test')}\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/notification/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"notification",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "create Webhook",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d842f293-d9d6-4f26-a6b1-135ccb7b41d3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_WebHook1\",\r\n    \"classNameFilter\": \"org.meveo.model.crm.Customer\",\r\n    \"eventTypeFilter\": \"CREATED\",\r\n    \"elFilter\": \"#{event.code.startsWith('test')}\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\",\r\n    \"host\": \"localhost\",\r\n    \"port\": \"8080\",\r\n    \"page\": \"meveo/api/rest/\",\r\n    \"httpMethod\": \"HTTP_GET\",\r\n    \"username\": \"test.username\",\r\n    \"password\": \"test.password\",\r\n    \"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/notification/webhook/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"notification",
										"webhook",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "create EmailNotifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a11dc7c2-bad6-400f-b59a-9b327fdfa1a4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_EmailNotif1\",\r\n    \"classNameFilter\": \"org.meveo.model.crm.Customer\",\r\n    \"eventTypeFilter\": \"CREATED\",\r\n    \"elFilter\": \"#{event.code.startsWith('test')}\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\",\r\n    \"emailFrom\": \"OpenCell\",\r\n    \"emailToEl\": \"edward.legaspi@opencellsoft.com\",\r\n    \"subject\": \"Test Meveo Application\",\r\n    \"body\": \"Test Body\",\r\n    \"htmlBody\": \"HTML Body\",\r\n    \"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/notification/email/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"notification",
										"email",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "create Timer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f3d89df-78e0-4911-a655-a0b26d439d83",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_Timer1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Timer_DESCP\",\r\n    \"hour\": \"1\",\r\n    \"minute\": \"10\",\r\n    \"second\": \"45\",\r\n    \"year\": \"*\",\r\n    \"month\": \"*\",\r\n    \"dayOfMonth\": \"*\",\r\n    \"dayOfWeek\": \"*\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/timerEntity/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"timerEntity",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "create JobInstance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6fe1360-5519-48fd-a9a0-f3e89abac219",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"jobTemplate\": \"ExportSubscriptionsJob\",\r\n    \"code\": \"{{baseEntityPrefix}}_ImpExp-Job1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Import-Export\",\r\n    \"timerCode\": \"{{baseEntityPrefix}}_Timer1\",\r\n    \"jobCategory\": \"IMPORT/EXPORT\",\r\n    \"followingJob\": \"ACCO_JOB\",\r\n    \"parameter\": \"param1\",\r\n    \"active\": \"false\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"jobInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "create Filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4d1051d-3e3a-49b5-885d-254e03b00a1f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_Filter1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Filter1_DESCP\",\r\n    \"shared\": \"false\",\r\n    \"inputXml\": \"<filter>\\n  <disabled>false</disabled>\\n  <appendGeneratedCode>false</appendGeneratedCode>\\n  <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n    <filterConditionType>COMPOSITE_AND</filterConditionType>\\n    <filterConditions>\\n      <primitiveFilterCondition>\\n        <filterConditionType>PRIMITIVE</filterConditionType>\\n        <fieldName>startRatingDate</fieldName>\\n        <operator>>=</operator>\\n        <operand>date:01/09/2015</operand>\\n      </primitiveFilterCondition>\\n    </filterConditions>\\n  </filterCondition>\\n  <primarySelector>\\n    <targetEntity>org.meveo.model.catalog.PricePlanMatrix</targetEntity>\\n    <alias>p</alias>\\n    <displayFields>\\n      <field>code</field>\\n      <field>eventCode</field>\\n    </displayFields>\\n    <exportFields/>\\n    <ignoreIfNotFoundForeignKeys/>\\n  </primarySelector>\\n  <secondarySelectors/>\\n</filter>\"\r\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filter/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filter",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "create Timer Hourly",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c5a73bd-6c43-49a3-8e1e-49503b0e481c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"Hourly\",\r\n    \"description\": \"Hourly\",\r\n    \"hour\": \"*\",\r\n    \"minute\": \"0\",\r\n    \"second\": \"0\",\r\n    \"year\": \"*\",\r\n    \"month\": \"*\",\r\n    \"dayOfMonth\": \"*\",\r\n    \"dayOfWeek\": \"*\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/timerEntity/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"timerEntity",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "create GDPR JobInstance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35e14b87-2bca-4017-8b01-49079a4b535e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jobTemplate\": \"GDPRJob\",\n    \"code\": \"GDPR_Job\",\n    \"description\": \"GDPR_Job\",\n    \"jobCategory\": \"DWH\",\n    \"active\": \"false\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"jobInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "create Timer Daily - Midnight",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bac911c-0ea4-41a1-a6ec-a686f27a7368",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"Daily-midnight\",\r\n    \"description\": \"Daily-midnight\",\r\n    \"hour\": \"23\",\r\n    \"minute\": \"59\",\r\n    \"second\": \"59\",\r\n    \"year\": \"*\",\r\n    \"month\": \"*\",\r\n    \"dayOfMonth\": \"*\",\r\n    \"dayOfWeek\": \"*\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/timerEntity/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"timerEntity",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "create PaymentSchedule Job",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9a4bfc8-8198-4a3d-81a5-e11bcca676cc",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"jobTemplate\": \"PaymentScheduleProcessingJob\",\r\n    \"code\": \"PaymentSchedule_Job\",\r\n    \"description\": \"PaymentSchedule_Job\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"active\": \"false\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"jobInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Setup TerminationReason",
					"item": [
						{
							"name": "update TERM_REASON_1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ff8c3c8-4279-40eb-8ccb-a04dadc525f2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"TERM_REASON_1\",\r\n    \"description\": \"Agreement Reimbursement Charge\",\r\n    \"applyAgreement\": \"true\",\r\n    \"applyReimbursment\": \"true\",\r\n    \"applyTerminationCharges\": \"true\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/terminationReason",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"terminationReason"
									]
								}
							},
							"response": []
						},
						{
							"name": "update TERM_REASON_2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f3c00b0-3f29-44f3-93ec-f48d13db15fb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"TERM_REASON_2\",\r\n    \"description\": \"Reimbursement\",\r\n    \"applyAgreement\": \"false\",\r\n    \"applyReimbursment\": \"true\",\r\n    \"applyTerminationCharges\": \"false\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/terminationReason",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"terminationReason"
									]
								}
							},
							"response": []
						},
						{
							"name": "update TERM_REASON_3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "904e03b8-b976-42cf-b66b-5f6daa7ae463",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"TERM_REASON_3\",\r\n    \"description\": \"Charge\",\r\n    \"applyAgreement\": \"false\",\r\n    \"applyReimbursment\": \"false\",\r\n    \"applyTerminationCharges\": \"true\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/terminationReason",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"terminationReason"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Service workflow",
			"item": [
				{
					"name": "Service workflow - service single activation",
					"item": [
						{
							"name": "Terminate services",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff3629da-383a-4b9a-93e4-c843407a6eaf",
										"exec": [
											"let jsonData = pm.response.json();\r",
											"pm.test(request.name + \" - Check Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check Status\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check ErrorCode\", function () {\r",
											"    pm.expect(jsonData.errorCode).to.eql();\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check Message\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"serviceIds\" : [{{serviceId}}],\r\n\"subscriptionCode\" : \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n\"terminationReason\" : \"TERM_REASON_1\",\r\n\"terminationDate\" : \"2019-12-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/terminateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"terminateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set service.allowMultiInstantiation=false - AUTHORIZATION_SUPERADMIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "690ab637-7e3e-44c7-ad70-cf4ad80b4070",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.superpassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.superusername}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuc3VwZXJhZG1pbjpvcGVuY2VsbC5zdXBlcmFkbWlu"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"properties\": [\r\n        {\r\n            \"key\": \"service.allowMultiInstantiation\",\r\n            \"value\": \"false\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/configurations/properties",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"configurations",
										"properties"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create subscription 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0266b3b7-a732-4d57-bbb7-2211d8dde275",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n\t\"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n\t\"subscriptionDate\": \"2016-12-01\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Instantiate Service 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ace0d63a-0b4f-473f-af4d-cd0e76633b9b",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2016-12-01\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"instantiateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Instantiate Service again - fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d59911be-2611-4c9d-ab7b-a1cf7fc7da59",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"ServiceInstance with code=\"+pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1 is already instanciated or activated.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"3\",\n                \"subscriptionDate\": \"2016-12-11\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"instantiateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9635157d-9f74-4bc0-be95-03c7e7ca51c4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
											"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
											"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(\"2016-12-01T\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"INACTIVE\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(\"2016-12-01T\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate services 1 and 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "703ea397-0ffd-4ae2-a765-4844987732b6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n\t\"servicesToActivate\": {\r\n\t\t\"service\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\t\t\t\"quantity\": \"1\",\r\n\t\t\t\t\"subscriptionDate\": \"2016-12-02\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n\t\t\t\t\"quantity\": \"2\",\r\n\t\t\t\t\"subscriptionDate\": \"2017-01-01\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find service instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ea8093c-4429-45a0-a439-b3612af66d0f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
											"    pm.expect(jsonData.serviceInstance.status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.serviceInstance.subscriptionDate).to.contains(\"2016-12-02T\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1&serviceInstanceId={{siid1}}",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"serviceInstance"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
										},
										{
											"key": "serviceInstanceCode",
											"value": "{{baseEntityPrefix}}_SERVICE1"
										},
										{
											"key": "serviceInstanceId",
											"value": "{{siid1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Instantiate Service 1 again - fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32cc7ba4-7d5b-465c-bb84-49012a4aa81e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"ServiceInstance with code=\"+pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1 is already instanciated.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-05\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"instantiateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate service 1 again - fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88e7a08b-d0e2-4888-a9c6-d16c86de95ff",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n\t\"servicesToActivate\": {\r\n\t\t\"service\": {\r\n\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\t\t\"quantity\": \"5\",\r\n\t\t\t\"subscriptionDate\": \"2016-12-08\"\r\n\t\t}\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find service instance by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2cf21867-e209-4534-bfe0-7898ab371c48",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
											"    pm.expect(jsonData.serviceInstance.status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.serviceInstance.subscriptionDate).to.contains(\"2016-12-02T\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL&serviceInstanceId={{siid1}}",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"serviceInstance"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
										},
										{
											"key": "serviceInstanceId",
											"value": "{{siid1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Terminate Service by id1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37bab414-573c-499e-91ae-7d71da354612",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(code);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    pm.expect(jsonData.status).to.eql(status);",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});",
											"",
											"/*",
											"var msg = jsonData.message;",
											"switch(msg){",
											"    case \"is not of status [ACTIVE]\":",
											"        pm.variables.set(\"code\",200);",
											"        pm.variables.set(\"status\",\"SUCCESS\");",
											"        break;",
											"}",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"serviceIds\": [\n        \"{{serviceId}}\"\n    ],\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\n    \"terminationReason\": \"TERM_REASON_1\",\n    \"terminationDate\": \"2016-12-31\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/terminateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"terminateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription T1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b10c12a7-51d5-46c7-b67b-6b7531cd25d2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
											"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(\"2016-12-01T\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(\"2016-12-02T\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(\"2017-01-01T\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Terminate Service 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f036420-ab9e-4c48-827a-6d5e732cd62b",
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE2\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n    \"terminationReason\": \"TERM_REASON_3\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/terminateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"terminateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription T2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2016065-a66e-489d-9717-e23cb5b2e273",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
											"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(\"2016-12-01T\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(\"2016-12-02T\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(\"2017-01-01T\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fee710b4-f0f4-4656-ba6d-1cad651b9779",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 240);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e5028e5b-e8f1-49ff-9905-f480a5442190",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Service workflow - service multi activation",
					"item": [
						{
							"name": "SET_VARIABLES",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0c6c06e3-a41e-490e-afec-f5e3844a8b22",
										"exec": [
											"pm.globals.set(\"index\", 241);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fbf552bc-5438-4438-8c0d-69c1c62d083c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "OPTIONS",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "https://postman-echo.com/",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Set service.allowMultiInstantiation=true - AUTHORIZATION_SUPERADMIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "821faf44-4ec7-423f-a62b-d0a59917aeec",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.superpassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.superusername}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuc3VwZXJhZG1pbjpvcGVuY2VsbC5zdXBlcmFkbWlu"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n    \"properties\": [\r\n        {\r\n            \"key\": \"service.allowMultiInstantiation\",\r\n            \"value\": \"true\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/configurations/properties",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"configurations",
										"properties"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create subscription 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a393c5ed-8397-489a-9792-cca75dbfc3be",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n\t\"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n\t\"subscriptionDate\": \"2016-12-01\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Instantiate Service 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64813789-a842-4dd1-aa72-141e1f248dcb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-11\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"instantiateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Instantiate Service again - fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33e2ccf9-5117-42c8-bef2-c5fe7d16b62c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"ServiceInstance with code=\"+pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1 is already instanciated.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-05\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"instantiateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "505f822d-a441-4452-8d86-832db92dad46",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SUB_SERVICE_MULTI\");",
											"    pm.expect(jsonData.subscription.userAccount).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_UA\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
											"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(\"2016-12-01T\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate services 1 and 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0c29602-e2cc-487d-bb9e-cfd2d5959b15",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n\t\"servicesToActivate\": {\r\n\t\t\"service\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\t\t\t\"quantity\": \"1\",\r\n\t\t\t\t\"subscriptionDate\": \"2016-12-02\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n\t\t\t\t\"quantity\": \"2\",\r\n\t\t\t\t\"subscriptionDate\": \"2017-01-01\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription A1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43608a5d-f35a-442f-bf6c-67138db6e997",
										"exec": [
											"let jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"serviceId\",jsonData.subscription.services.serviceInstance[0].id);",
											"//console.log(\"serviceId\",jsonData.subscription.services.serviceInstance[0].id);",
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    pm.expect(jsonData.message).to.eql();",
											"});",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SUB_SERVICE_MULTI\");",
											"    pm.expect(jsonData.subscription.userAccount).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_UA\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
											"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contain(\"2016-12-02T\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contain(\"2017-01-01T\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find service instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8865c198-40df-41ef-bd28-9ffe6080b14b",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
											"    pm.expect(jsonData.serviceInstance.status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.serviceInstance.quantity).to.eql(1);",
											"    pm.expect(jsonData.serviceInstance.subscriptionDate).to.contains(\"2016-12-02T\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1&serviceInstanceId={{serviceId}}",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"serviceInstance"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
										},
										{
											"key": "serviceInstanceCode",
											"value": "{{baseEntityPrefix}}_SERVICE1"
										},
										{
											"key": "serviceInstanceId",
											"value": "{{serviceId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Terminate Service1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46b1f969-43cf-4f25-bc5b-8f11c99217b5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"services\": [\"{{baseEntityPrefix}}_SERVICE1\"],\r\n    \"serviceIds\":[{{serviceId}}],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/terminateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"terminateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Instantiate Service 1 again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efa7e6d4-bbbd-439e-902c-576db0ab2816",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-05\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"instantiateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate service 1 again - change quantity and subscription date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2029376-cbdb-4907-a5d4-a934e09da9df",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"5\",\r\n                \"subscriptionDate\": \"2016-12-08\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription A2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2403dbd-d9cf-423e-baf8-2d1dddf7dcce",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SUB_SERVICE_MULTI\");",
											"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(\"2016-12-02T\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.contains(\"2016-12-02T\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationReason).to.eql(\"TERM_REASON_1\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(\"2017-01-01T\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[2].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[2].status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[2].quantity).to.eql(5);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[2].subscriptionDate).to.contains(\"2016-12-08T\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Terminate Service1 A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b66ef44-affb-4030-a6fa-d5b661880c91",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE1\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/terminateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"terminateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Instantiate Service 1 again 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd0f8d4d-dc12-4610-b634-fe2724879485",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"11\",\r\n                \"subscriptionDate\": \"2016-12-11\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"instantiateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate service 1 again - no changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7fd343a-dcc4-4168-8cdb-2a168dafe97a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"subscriptionDate\": \"2016-12-11\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription A3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27b7e092-20b1-41cd-9b68-a1a07397cec4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_MULTI\");",
											"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
											"    pm.globals.set(\"siid1\", jsonData.subscription.services.serviceInstance[0].id);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(\"2016-12-02T\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.contains(\"2016-12-02T\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationReason).to.eql(\"TERM_REASON_1\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
											"    pm.globals.set(\"siid2\", jsonData.subscription.services.serviceInstance[1].id);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(\"2017-01-01T\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[2].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
											"    pm.globals.set(\"siid3\", jsonData.subscription.services.serviceInstance[2].id);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[2].status).to.eql(\"TERMINATED\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[2].quantity).to.eql(5);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[2].subscriptionDate).to.contains(\"2016-12-08T\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[2].terminationDate).to.contains(\"2016-12-08T\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[2].terminationReason).to.eql(\"TERM_REASON_1\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[3].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
											"    pm.globals.set(\"siid4\", jsonData.subscription.services.serviceInstance[3].id);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[3].status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[3].quantity).to.eql(11);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[3].subscriptionDate).to.contains(\"2016-12-11T\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find service instance - fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6613fc17-da57-4b3a-a3b0-014b06217006",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"More than one service instance with status [] was found. Please use ID to refer to service instance.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"serviceInstance"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
										},
										{
											"key": "serviceInstanceCode",
											"value": "{{baseEntityPrefix}}_SERVICE1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find service instance by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97b0d3b0-692f-49c5-b5b8-4c6285c94026",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
											"    pm.expect(jsonData.serviceInstance.status).to.eql(\"TERMINATED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI&serviceInstanceId={{serviceId}}",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"serviceInstance"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
										},
										{
											"key": "serviceInstanceId",
											"value": "{{serviceId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Terminate Service by id1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b646c9c-f815-49b2-aff1-f192d76fe0b6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"serviceIds\": [{{serviceId}}],\r\n\t\"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n\t\"terminationReason\": \"TERM_REASON_1\",\r\n\t\"terminationDate\": \"2016-12-31\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/terminateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"terminateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription T1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3c063a4-8675-4b20-a9db-42e1bc51091a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_MULTI\");",
											"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[3].id).to.eql(pm.globals.get(\"siid4\"));",
											"    pm.expect(jsonData.subscription.services.serviceInstance[3].status).to.eql(\"TERMINATED\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Terminate Service2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b03de3f3-69d3-419a-b412-d9d7dfb69141",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE2\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/terminateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"terminateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription T2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12cbe359-f96f-4b41-9b4d-4336e1168d9c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_MULTI\");",
											"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4b2538c5-48d5-42f3-930b-d0e2940e55d6",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 240);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "94bd0d39-0567-435f-90f5-61ee90e0a2da",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e3293230-3b69-41fb-bb02-2678f702c8b3",
						"type": "text/javascript",
						"exec": [
							"pm.globals.set(\"index\", 242);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "242b51be-33a2-488d-9b18-1f55bdd89105",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Subscription workflow",
			"item": [
				{
					"name": "Terminate Subscription",
					"item": [
						{
							"name": "Create subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba83ac66-9408-4677-b8b4-baf77ab904b6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8b63fc32-da59-48cc-9b07-a10499804c8e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_SUB_WFL{{inc}}\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2019-03-01\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate services",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76f630fc-ef73-4b33-8da4-2374f54c6b59",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SUB_WFL{{inc}}\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2015-02-02\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"2\",\r\n                \"subscriptionDate\": \"2015-04-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "908e8a62-728c-47ce-8de4-96c818866564",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SUB_WFL\");",
											"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(\"2016-03-01T\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(\"2015-02-02T\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(\"2015-04-01T\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SUB_WFL{{inc}}",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_SUB_WFL{{inc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Terminate Subscription 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea24c36e-aa32-4854-99cc-45c70054e301",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SUB_WFL{{inc}}\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2020-04-30\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/terminate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"terminate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create subscription - future termination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c09e0a9-8c44-42c4-ae75-8b426ec36f9f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION{{inc}}\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\"\r\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate services - future termination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72054548-10ad-4609-84e5-138db7432304",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION{{inc}}\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{today}}\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription - future termination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a564eca7-6b53-4cd5-bfe2-68ec5df8a264",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION\");",
											"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(pm.globals.get(\"today\"));",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(pm.globals.get(\"today\"));",
											"    pm.expect(jsonData.subscription.renewalRule.initialTermType).to.eql(\"RECURRING\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION{{inc}}",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION{{inc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Terminate Subscription - future termination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1474b61-b7f4-4c70-a1e3-52576572ec9c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION{{inc}}\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{terminationDate}}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/terminate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"terminate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create subscription - in-between-days termination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "025b6da0-16d7-4850-b4a0-30fcdcb0dd92",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION{{inc}}\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{10daysBefore}}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate services - in-between-days termination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b71338b-fe7b-4765-a9b5-1fb9db68b5fd",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION{{inc}}\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"{{5daysBefore}}\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"{{2daysBefore}}\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription - in-between-days termination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d37e02bd-ad42-4ee5-82f0-ffd58f9d2f72",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_TERMINATION\");",
											"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(pm.globals.get(\"10daysBefore\"));",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(pm.globals.get(\"5daysBefore\"));",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(pm.globals.get(\"2daysBefore\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION{{inc}}",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION{{inc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Terminate Subscription - in-between-days termination - before Subscription's subscription date -KO",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36ae47a6-5ec2-4df2-b7be-1b135a200c69",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Termination date can not be before the subscription date\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION{{inc}}\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{20daysBefore}}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/terminate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"terminate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Terminate Subscription - in-between-days termination - on Subscription's subscription date - OK",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05a00f8c-4c1c-4c96-bc09-3c0766a214eb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION{{inc}}\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{10daysBefore}}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/terminate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"terminate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription - in-between-days termination 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0898bf1-c00c-43ce-8174-a707a0b78fc8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_TERMINATION\");",
											"    pm.expect(jsonData.subscription.status).to.eql(\"RESILIATED\");",
											"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(pm.globals.get(\"10daysBefore\"));",
											"    pm.expect(jsonData.subscription.terminationDate).to.contains(pm.globals.get(\"10daysBefore\"));",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(pm.globals.get(\"5daysBefore\"));",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.contains(pm.globals.get(\"5daysBefore\"));",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(pm.globals.get(\"2daysBefore\"));",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].terminationDate).to.contains(pm.globals.get(\"2daysBefore\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION{{inc}}",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION{{inc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create subscription - in-between-days 2 termination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ecba8af-cece-47f0-b353-1da199f128cf",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION{{inc}}\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{10daysBefore}}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate services - in-between-days 2 termination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7701b89-63ab-48b5-b691-057b94f441f3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION{{inc}}\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{5daysBefore}}\"\n            },\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{2daysBefore}}\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription - in-between-days 2 termination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cca471e8-e6cc-48f1-84f0-9f4f34773c36",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_2_TERMINATION\");",
											"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(pm.globals.get(\"10daysBefore\"));",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(pm.globals.get(\"5daysBefore\"));",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(pm.globals.get(\"2daysBefore\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION{{inc}}",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION{{inc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Terminate Subscription - in-between-days 2 termination - inbetween service's subscription date - OK",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a8100b2-a466-4149-8d0f-cbf471fe88ed",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION{{inc}}\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{3daysBefore}}\"\r\n}\r\n\t",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/terminate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"terminate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription - in-between-days 2 termination 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a2b302c-ab7b-4fe8-ae55-6e67a03f6f64",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_2_TERMINATION\");",
											"    pm.expect(jsonData.subscription.status).to.eql(\"RESILIATED\");",
											"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(pm.globals.get(\"10daysBefore\"));",
											"    pm.expect(jsonData.subscription.terminationDate).to.contains(pm.globals.get(\"3daysBefore\"));",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(pm.globals.get(\"5daysBefore\"));",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.contains(pm.globals.get(\"3daysBefore\"));",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(pm.globals.get(\"2daysBefore\"));",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].terminationDate).to.contains(pm.globals.get(\"2daysBefore\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION{{inc}}",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION{{inc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create subscription - future termination 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ff73152-391c-416b-b122-ead253ad65c6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION3_{{inc}}\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\",\r\n    \"terminationDate\": \"{{terminationDate}}\",\r\n    \"terminationReason\": \"TERM_REASON_1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate services - future termination 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14ebd4f5-6d7c-4376-82fb-7020b33d8330",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION3_{{inc}}\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{today}}\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription - future termination 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62df5f78-23b1-407a-9077-ebd64e50ea66",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION_3\");",
											"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
											"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(pm.globals.get(\"today\"));",
											"    pm.expect(jsonData.subscription.terminationDate).to.contains(pm.globals.get(\"terminationDate\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION3_{{inc}}",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION3_{{inc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update subscription - future termination 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed0daaf7-c0cc-4f76-9ea5-e382c1a93a36",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION3_{{inc}}\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\",\r\n    \"terminationDate\": \"{{terminationDate}}\",\r\n    \"terminationReason\": \"TERM_REASON_1 updated\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription - future termination 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc75f6d4-aecb-4807-8f7b-43c167b60303",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION_4\");",
											"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
											"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(pm.globals.get(\"today\"));",
											"    pm.expect(jsonData.subscription.subscribedTillDate).to.contains(pm.globals.get(\"terminationDate\"));",
											"    pm.expect(jsonData.subscription.renewalRule.initialTermType).to.eql(\"FIXED\");",
											"    pm.expect(jsonData.subscription.renewalRule.autoRenew).to.eql(false);",
											"    pm.expect(jsonData.subscription.renewalRule.endOfTermAction).to.eql(\"TERMINATE\");",
											"    pm.expect(jsonData.subscription.renewalRule.terminationReasonCode).to.eql(\"TERM_REASON_1\");",
											"    pm.expect(jsonData.subscription.renewalRule.extendAgreementPeriodToSubscribedTillDate).to.eql(false);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION3_{{inc}}",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION3_{{inc}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ba78af2a-140c-4af0-bf18-9468ec120051",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cb4ba4ae-7360-4180-a883-bffd4f9eb784",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ApplyOneShotChargeInstance",
					"item": [
						{
							"name": "Create subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23f92cbc-43f2-44f9-a397-b0abad8a3649",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_SUB_AOCI\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2016-03-01\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate services",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ceb6a00-0e85-4fe3-8f7b-88bb2808df01",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SUB_AOCI\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2015-02-02\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"2\",\r\n                \"subscriptionDate\": \"2015-04-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "applyOneShotChargeInstance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c4e6afd-5384-476a-ab5e-b451564bbb9f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"oneShotCharge\": \"{{baseEntityPrefix}}_OS1\",\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SUB_AOCI\",\n    \"createWallet\": false,\n    \"operationDate\": \"2016-04-06\",\n    \"quantity\": \"1\",\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description\",\n    \"amountWithoutTax\": \"11\",\n    \"amountWithTax\": \"13\",\n    \"criteria1\": \"criteria1\",\n    \"criteria2\": \"criteria2\",\n    \"criteria3\": \"criteria3\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/applyOneShotChargeInstance",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"applyOneShotChargeInstance"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Subscription instantiate/activate service NOT in Offer and modify offer in subscription",
					"item": [
						{
							"name": "Create subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4f1af17-2d20-4308-8fe7-616d6ff93954",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create service with min req Vals",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b990f71-0186-41d0-9f68-49bc3e3e9559",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SERVICE\",\r\n    \"invoicingCalendar\": \"Multi period\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate services with service not in Offer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70ec8353-03be-4024-a5d6-5abf343dadb3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"BUSINESS_API_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Service \"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SERVICE is not associated with Offer\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_SERVICE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2015-02-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Instanticate services with service not in Offer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc18f28b-a4c9-44c5-9c4a-f4f716467f97",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"BUSINESS_API_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"No offerServiceTemplate corresponds to \"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SERVICE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_SERVICE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2016-05-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"instantiateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update subscription with another offer - ok",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45f8f27b-e687-433d-86bb-d17688cef0cc",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "Instanticate services",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "257a91d4-9aa3-4523-9956-787d2f41bde1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2016-05-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"instantiateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update subscription with another offer - fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0843dd2-9ed5-40aa-a0e3-03a78133343a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Cannot change the offer of subscription once the services are instantiated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Apply Product",
					"item": [
						{
							"name": "Create CFT Product 100",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2598fdf9-379e-4034-b1f2-c0a98ac58d35",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n    \"fieldType\": \"DOUBLE\",\r\n    \"appliesTo\": \"ProductInstance\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"defaultValue\": \"101\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CFT Product 101",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cfa92534-ed57-4a57-a49a-3dcd41bd5e04",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE101\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE101\",\r\n    \"fieldType\": \"DOUBLE\",\r\n    \"appliesTo\": \"ProductInstance\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"defaultValue\": \"101\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product charge100",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92282fe7-19d8-401f-b14d-a0c91b359945",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC100\",\r\n    \"description\": \"{{baseEntityPrefix}}_PC100\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": false,\r\n    \"amountEditable\": false,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Produit 100 Test\"\r\n        }\r\n    ],\r\n    \"taxClassCode\":\"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalogManagement/productChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalogManagement",
										"productChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product 100",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8346f36-5f2b-43f8-857e-207bcda11688",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PRODUCT100\",\r\n    \"description\": \"{{baseEntityPrefix}}_PRODUCT2 DESC\",\r\n    \"name\": \"{{baseEntityPrefix}}_PRODUCT100 NAME\",\r\n    \"productChargeTemplate\": [\r\n        {\r\n            \"code\": \"{{baseEntityPrefix}}_PC100\",\r\n            \"invoiceSubCategory\": \"SUB_DATA\",\r\n            \"disabled\": false\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalogManagement/productTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalogManagement",
										"productTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create priceplan product 100",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "847da51c-14d7-4fba-aca2-a7f648c935d4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC100_PP\",\r\n    \"description\": \"price plan product 100\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_PC100\",\r\n    \"amountWithoutTax\": \"5\",\r\n    \"amountWithTax\": \"6\",\r\n    \"priority\": \"1\",\r\n    \"amountWithoutTaxEL\": \"#{mv:getInheritedCFValue(productInstance,'{{entityPrefix}}_{{index}}_CF_PROD_PRICE100')}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99c82beb-b56d-496e-8510-849829998df4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Apply product 2 to UA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1900480d-ac96-4c7f-bad2-56864892c1ae",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_UA\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"10\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount/applyProduct",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount",
										"applyProduct"
									]
								}
							},
							"response": []
						},
						{
							"name": "Apply product 2 to UA_2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42e7545e-150f-4bcf-93e4-282d45fd5d8e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_2\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_UA\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"10\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount/applyProduct",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount",
										"applyProduct"
									]
								}
							},
							"response": []
						},
						{
							"name": "Apply product 2 to SUB_2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8024087d-68d2-49eb-bac3-8b3cc0750219",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_SUB\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"10\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/applyProduct",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"applyProduct"
									]
								}
							},
							"response": []
						},
						{
							"name": "Apply product 100 to UA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55b30198-770b-4c93-ba6a-619fcaa41811",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT100\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_UA\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"101.1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount/applyProduct",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount",
										"applyProduct"
									]
								}
							},
							"response": []
						},
						{
							"name": "Apply product 100 to SUB_2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5683630b-9a82-4d98-ad28-7204f5fdfe91",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT100\",\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_SUB\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"101.2\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/applyProduct",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"applyProduct"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove CFT Product 100",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db925892-7956-4d13-832f-401f695ea0c8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/customFieldTemplate/{{entityPrefix}}_{{index}}_CF_PROD_PRICE100/ProductInstance",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"customFieldTemplate",
										"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100",
										"ProductInstance"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove CFT Product 101",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d7378fc-badf-4cca-9207-1cefa499be74",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/customFieldTemplate/{{entityPrefix}}_{{index}}_CF_PROD_PRICE101/ProductInstance",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"customFieldTemplate",
										"{{entityPrefix}}_{{index}}_CF_PROD_PRICE101",
										"ProductInstance"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ec7a1ef-4977-43ed-8f56-ad67f731bad2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_PROD\");",
											"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
											"    pm.expect(jsonData.subscription.productInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_PRODUCT2\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_PROD",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_PROD"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update service instance",
					"item": [
						{
							"name": "Create CFT ServiceInstance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4a0f7a2-9f49-4d60-9ed2-3b3e3c5fa5e3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n    \"fieldType\": \"DOUBLE\",\r\n    \"appliesTo\": \"ServiceInstance\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"defaultValue\": \"101\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d80ff4b7-ffa8-4b51-a574-b74326712c6b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2017-03-15\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate services",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1be5b55-5d35-4579-ac19-a0edadf044b9",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2017-03-15\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"2\",\r\n                \"subscriptionDate\": \"2017-03-15\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d573f358-f808-480c-9eb1-3ff8ed8e9428",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_UPD_SERV_100\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update services",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cfc6ea2-f930-493e-853f-8eda4550db8c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"serviceToUpdate\": [\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"endAgreementDate\": \"2017-03-29\",\n            \"customFields\": {\n                \"customField\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                        \"doubleValue\": \"201\"\n                    }\n                ]\n            }\n        },\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n            \"endAgreementDate\": \"2017-03-30\",\n            \"customFields\": {\n                \"customField\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                        \"doubleValue\": \"202\"\n                    }\n                ]\n            }\n        }\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/updateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"updateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription-Updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae156e8d-0d13-4dcc-88a2-cd1ebb16ee0c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_UPD_SERV_100\");",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(jsonBody.services.serviceInstance[0].quantity);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(jsonBody.services.serviceInstance[1].quantity);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"services\": {\n        \"serviceInstance\": [\n            {\n                \"quantity\": 1,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 201\n                        }\n                    ]\n                }\n            },\n            {\n                \"quantity\": 2,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 202\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update services - change quantity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95f67179-7eb6-4e11-a2a9-0229f2729977",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"serviceToUpdate\": [\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"quantity\": \"5\"\n        },\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n            \"quantity\": \"7\"\n        }\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/updateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"updateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription - Updated quantity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2cc00ccb-d3e9-403c-8756-538086d4329f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.subscription.code).to.eql(jsonBody.code);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(jsonBody.services.serviceInstance[0].quantity);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(jsonBody.services.serviceInstance[1].quantity);",
											"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"services\": {\n        \"serviceInstance\": [\n            {\n                \"quantity\": 5,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 201\n                        }\n                    ]\n                }\n            },\n            {\n                \"quantity\": 7,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 202\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete CFT ServiceInstance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8156db65-36ea-4e91-832b-4fb6b4f58073",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/customFieldTemplate/{{entityPrefix}}_{{index}}_CF_SERV_UPD_100/ServiceInstance",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"customFieldTemplate",
										"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100",
										"ServiceInstance"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update services - future termination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f0f8690-dcb1-4ebd-b26b-7e534e4d97a7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f67d24f6-4700-4e14-86c9-f577a03c7342",
										"exec": [
											"var today = new Date();\r",
											"var terminationDate = new Date();\r",
											"terminationDate.setMonth(today.getMonth() + 5);\r",
											"\r",
											"\r",
											"pm.globals.set(\"testCase.terminationDate\", terminationDate.toISOString().slice(0, 10));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"serviceToUpdate\": [\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"terminationDate\": \"{{testCase.terminationDate}}\",\n            \"terminationReason\": \"TERM_REASON_1\"\n        }\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/updateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"updateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find service instance - future termination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ef068c4-4f70-4e75-a757-08c74da20840",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.serviceInstances[0].code).to.eql(jsonBody.serviceInstances[0].code);",
											"    pm.expect(jsonData.serviceInstances[0].quantity).to.eql(jsonBody.serviceInstances[0].quantity);",
											"    pm.expect(jsonData.serviceInstances[0].subscriptionDate).to.contains(jsonBody.serviceInstances[0].subscriptionDate);",
											"    pm.expect(jsonData.serviceInstances[0].terminationDate).to.contains(pm.globals.get(\"testCase.terminationDate\"));",
											"    pm.expect(jsonData.serviceInstances[0].serviceRenewal).to.eql(jsonBody.serviceInstances[0].serviceRenewal);",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"actionStatus\": {\n        \"status\": \"SUCCESS\"\n    },\n    \"serviceInstances\": [\n        {\n            \"id\": 30,\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"description\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"subscriptionDate\": \"2017-03-15\",\n            \"quantity\": 5,\n            \"serviceRenewal\": {\n                \"initialTermType\": \"FIXED\",\n                \"renewalTermType\": null,\n                \"initialyActiveFor\": null,\n                \"initialyActiveForUnit\": null,\n                \"calendarInitialyActiveFor\": null,\n                \"autoRenew\": false,\n                \"daysNotifyRenewal\": null,\n                \"endOfTermAction\": \"TERMINATE\",\n                \"terminationReasonCode\": \"TERM_REASON_1\",\n                \"renewFor\": null,\n                \"calendarRenewFor\": null,\n                \"renewForUnit\": null,\n                \"extendAgreementPeriodToSubscribedTillDate\": false\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/serviceInstances?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"serviceInstances"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
										},
										{
											"key": "serviceInstanceCode",
											"value": "{{baseEntityPrefix}}_SERVICE1"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Subscribe to disable offer",
					"item": [
						{
							"name": "Disable Offer3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0ed62a2-0d56-44e6-88f6-c1f9ac3637f0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_OFFER3\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/{{baseEntityPrefix}}_OFFER3/disable",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"{{baseEntityPrefix}}_OFFER3",
										"disable"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8b89d89-39a9-4a9c-b535-a377509cbab2",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Cannot subscribe to disabled offer\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable Offer3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8151506-b04a-4862-a4f5-89d11151a038",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_OFFER3\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/{{baseEntityPrefix}}_OFFER3/enable",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"{{baseEntityPrefix}}_OFFER3",
										"enable"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Due date delay",
					"item": [
						{
							"name": "Find due date delay - bc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02128c50-737c-4958-b2b9-1cf21c693b5a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData).to.deep.equal(jsonBody);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"actionStatus\": {\r\n        \"status\": \"SUCCESS\"\r\n    },\r\n    \"dueDateDelay\": {\r\n        \"delayOrigin\": \"BC\",\r\n        \"computedDelay\": 2,\r\n        \"delayEL\": null\r\n    }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/dueDateDelay?subscriptionCode={{baseEntityPrefix}}_SUB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"dueDateDelay"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{baseEntityPrefix}}_SUB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8fd02d65-9496-41d6-954b-48108f84e474",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"CA_DELAY_{{index}}\",\r\n    \"description\": \"CA_DELAY_{{index}}\",\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"currency\": \"USD\",\r\n    \"language\": \"ENG\",\r\n    \"creditCategory\": \"PRO\",\r\n    \"dueDateDelayEL\": \"#{ba.customerAccount.auditable.created.date}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create BA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d85260ee-3f42-4e02-8fe7-65770d5a7196",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"BA_DELAY_{{index}}\",\r\n    \"description\": \"BA_DELAY_{{index}}\",\r\n    \"customerAccount\": \"CA_DELAY_{{index}}\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"US\",\r\n    \"language\": \"ENG\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create UA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1df21769-cc78-4134-8f13-afafe8f13236",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"UA_DELAY_{{index}}\",\r\n    \"description\": \"UA_DELAY_{{index}}\",\r\n    \"billingAccount\": \"BA_DELAY_{{index}}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3154716b-ba55-4817-97e6-4d40c4046164",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"DELAY_SUB_{{index}}\",\r\n    \"description\": \"DELAY_SUB_{{index}}\",\r\n    \"userAccount\": \"UA_DELAY_{{index}}\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"subscriptionDate\": \"2017-01-07\",\r\n    \"endAgreementDate\": \"2017-01-07\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find due date delay - ca",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a0e9997-a16a-4f81-a427-7a1d5e31301f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.dueDateDelay.delayOrigin).to.deep.equal(jsonBody.delayOrigin);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"delayOrigin\": \"CA\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/dueDateDelay?subscriptionCode=DELAY_SUB_{{index}}",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"dueDateDelay"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "DELAY_SUB_{{index}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate services",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7be9aad7-2b07-4b90-85d7-cad509e1b7be",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscription\": \"DELAY_SUB_{{index}}\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n                \"quantity\": \"5\",\r\n                \"subscriptionDate\": \"2017-03-15\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE4\",\r\n                \"quantity\": \"10\",\r\n                \"subscriptionDate\": \"2017-05-15\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Subscription age",
					"item": [
						{
							"name": "Create recurring",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6de0f031-3c98-47fc-8f62-831f026cab9e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC1\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": false,\r\n    \"amountEditable\": true,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Subscription Age\"\r\n        }\r\n    ],\r\n    \"calendar\": \"MONTHLY\",\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"durationTermInMonth\": \"4\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\":\"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f74ced3e-066f-4c53-97f5-a3b1cdc03760",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n    \"description\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n    \"invoicingCalendar\": \"MONTHLY\",\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Offer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8d263f1-3cb7-4084-b8a5-58ab12c5ace7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"disabled\": false,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create priceplan recurring 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "846121f8-4996-4e81-aaac-25da1a0956e7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE2\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"amountWithoutTax\": \"5\",\r\n    \"amountWithTax\": \"10\",\r\n    \"priority\": \"1\",\r\n    \"minSubscriptionAgeInMonth\": \"5\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create priceplan recurring 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06269110-0314-4425-ae50-cd2c0bdc93cf",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE2\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"amountWithoutTax\": \"15\",\r\n    \"amountWithTax\": \"30\",\r\n    \"priority\": \"1\",\r\n    \"maxSubscriptionAgeInMonth\": \"3\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create priceplan recurring",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7c71f8b-ea66-4849-8f2b-1caa13b726cc",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE1\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"amountWithoutTax\": \"2\",\r\n    \"amountWithTax\": \"4\",\r\n    \"priority\": \"2\",\r\n    \"minSubscriptionAgeInMonth\": \"1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7441ff1c-ad69-4c3f-b99e-40e873828b9e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_AGE{{inc}}\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"subscriptionDate\": \"2017-03-01\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate services",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e8cc113-1fdd-4c4e-bcc2-2b8aa8495c09",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_AGE{{inc}}\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2017-05-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Terminate subscription 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8314b651-b5e0-46c8-968d-ff114ab6bfd0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_AGE{{inc}}\",\n    \"terminationReason\": \"TERM_REASON_1\",\n    \"terminationDate\": \"2017-12-01\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/terminate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"terminate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create subscription 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3078584-02b6-4645-befb-681c0d4356ad",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_AGE2_{{inc}}\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"subscriptionDate\": \"2017-07-01\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate services 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0479e1dd-92af-4e7b-8137-f803b63cc0ab",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_AGE2_{{inc}}\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2017-07-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Terminate subscription 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "760a2aab-6c4b-43b9-a793-a3e73f528786",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_AGE2_{{inc}}\",\n    \"terminationReason\": \"TERM_REASON_1\",\n    \"terminationDate\": \"2017-09-01\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/terminate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"terminate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Activate Subscription",
					"item": [
						{
							"name": "Create subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f740382-e68b-44c5-b5c1-97a4282bdcdb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2018-10-13\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Instanticate services",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3902fa4-204e-48cd-95be-a3995cc5160f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"instantiateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create subscription 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "126d2008-392f-4fe3-86d1-40804f8807db",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION2\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2018-10-13\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Instanticate services 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89d17874-be1e-4553-900a-9140c3d070fe",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION2\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            },\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"instantiateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03361b4a-9014-4500-b3a2-84a8bb120017",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{entityPrefix}}_{{index}}_SUB_ACTIVATION",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate subscription 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba48e216-d634-46ac-a323-c798525b2913",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{entityPrefix}}_{{index}}_SUB_ACTIVATION2",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Subscription status notification",
					"item": [
						{
							"name": "Create script",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdb625f1-3d3a-4348-b611-dc8a213a84c0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"org.meveo.service.script.SubscriptionStatusUpdatedScript\",\r\n    \"description\": \"rating script\",\r\n    \"type\": \"JAVA\",\r\n    \"script\": \"package org.meveo.service.script;\\n\\nimport org.meveo.admin.exception.BusinessException;\\nimport org.meveo.model.billing.Subscription;\\nimport org.meveo.model.billing.SubscriptionStatusEnum;\\nimport org.meveo.service.billing.impl.SubscriptionService;\\nimport org.meveo.service.script.Script;\\n\\nimport java.util.Map;\\n\\npublic class SubscriptionStatusUpdatedScript extends Script {\\n\\n    private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(\\\"SubscriptionService\\\");\\n\\n    @Override\\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\\n        log.info(\\\"<<<<<<< SubscriptionStatusUpdatedScript >>>>>>>>>>\\\");\\n        Subscription subscription = (Subscription) methodContext.get(\\\"subscription\\\");\\n        SubscriptionStatusEnum previousState = (SubscriptionStatusEnum) methodContext.get(\\\"previousState\\\");\\n        SubscriptionStatusEnum currentState = (SubscriptionStatusEnum) methodContext.get(\\\"currentState\\\");\\n        log.info(\\\"subscription.getCode() : \\\" + subscription.getCode());\\n        log.info(\\\"currentState : \\\" + currentState.name());\\n        log.info(\\\"previousState : \\\" + previousState.name());\\n        subscription.setDescription(\\\"from_\\\" + previousState + \\\"_to_\\\" + currentState);\\n        subscriptionService.update(subscription);\\n    }\\n} \"\r\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"scriptInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create notifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63bff521-d9f9-442a-afd1-dafb19540017",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SubscriptionStatusUpdatedNotification\",\r\n    \"classNameFilter\": \"org.meveo.model.billing.Subscription\",\r\n    \"eventTypeFilter\": \"STATUS_UPDATED\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.SubscriptionStatusUpdatedScript\",\r\n    \"scriptParams\": {\r\n        \"subscription\": \"#{event.entity}\",\r\n        \"previousState\": \"#{event.previousState}\",\r\n        \"currentState\": \"#{event.currentState}\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/notification/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"notification",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18f7ba78-34c4-4924-a295-a47406c49599",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2018-10-13\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Instanticate services",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8093d36a-e7ce-4221-9d24-6d16af29f699",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"instantiateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81d90ce3-5e69-4b4e-a928-3a3859f1609e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "848e5c63-4983-4ac2-b843-84bb853e1750",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.subscription.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.subscription.description).to.deep.equal(jsonBody.description);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\n    \"description\": \"from_CREATED_to_ACTIVE\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Notification",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4ae918b-3a8d-40f9-a5fc-3baf0e1c3c5b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/notification/{{entityPrefix}}_{{index}}_SubscriptionStatusUpdatedNotification",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"notification",
										"{{entityPrefix}}_{{index}}_SubscriptionStatusUpdatedNotification"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5df98090-1e31-4e21-9300-7bb770035edc",
						"type": "text/javascript",
						"exec": [
							"var today = new Date();",
							"var terminationDate = new Date();",
							"var days20before = new Date();",
							"var days10before = new Date();",
							"var days5before = new Date();",
							"var days3before = new Date();",
							"var days2before = new Date();",
							"terminationDate.setDate(today.getDate() + 1);",
							"days20before.setDate(today.getDate() - 20);",
							"days10before.setDate(today.getDate() - 10);",
							"days5before.setDate(today.getDate() - 5);",
							"days3before.setDate(today.getDate() - 3);",
							"days2before.setDate(today.getDate() - 2);",
							"pm.globals.set(\"index\", 194);",
							"pm.globals.set(\"today\", today.toISOString().slice(0, 10)+\"T\");",
							"pm.globals.set(\"terminationDate\", terminationDate.toISOString().slice(0, 10)+\"T\");",
							"pm.globals.set(\"20daysBefore\", days20before.toISOString().slice(0, 10)+\"T\");",
							"pm.globals.set(\"10daysBefore\", days10before.toISOString().slice(0, 10)+\"T\");",
							"pm.globals.set(\"5daysBefore\", days5before.toISOString().slice(0, 10)+\"T\");",
							"pm.globals.set(\"3daysBefore\", days3before.toISOString().slice(0, 10)+\"T\");",
							"pm.globals.set(\"2daysBefore\", days2before.toISOString().slice(0, 10)+\"T\");",
							"var inc = pm.globals.get(\"inc\");",
							"if(inc!=null){",
							"    inc++;",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3e83e74f-8cb7-4d33-9824-f3537aae36be",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Subscription with Inherited CF",
			"item": [
				{
					"name": "Tests",
					"item": [
						{
							"name": "Create CFT for User Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caabfd99-81db-4f65-a30f-44c58be7c815",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"UserAccount\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"userAccountCF\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CFT for Subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f1bd83d-2b71-4d77-9f14-8d2586d98eb1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"Subscription\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"subscriptionCF\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CFT for Subscription - Not Inherited",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4afbda1e-5fae-4fec-be20-7fc096f02729",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"Subscription\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"subscriptionCFNotInherited\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User Account 3 - Temp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e50d415-96ec-4e1e-8be4-be0e528adaf1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"description\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA_3\",\n    \"externalRef1\": \"EXTREF1\",\n    \"externalRef2\": \"EXTREF2\",\n    \"name\": {\n        \"title\": \"MR\",\n        \"firstName\": \"Edward\",\n        \"lastName\": \"Legaspi\"\n    },\n    \"address\": {\n        \"address1\": \"adress1\",\n        \"address3\": \"adress3\",\n        \"zipCode\": \"21000\",\n        \"city\": \"Dijon\",\n        \"country\": \"France\"\n    },\n    \"subscriptionDate\": \"2016-03-10\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n                \"stringValue\": \"UA_INHERITED\"\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8dd1e0a5-e3a0-43a4-a8dd-c10bbf72d4d8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"userAccount\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"subscriptionDate\": \"2015-02-01\",\n    \"endAgreementDate\": \"2015-05-01\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n                \"stringValue\": \"SUB_INHERITED\"\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "413d803d-6e68-4949-8070-20555aaab7ef",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_InheritedCF\");",
											"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
											"    pm.expect(jsonData.subscription.userAccount).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_UA_3_InheritedCF\");",
											"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(\"2015-02-01T\");",
											"    pm.expect(jsonData.subscription.endAgreementDate).to.contains(\"2015-05-01T\");",
											"    pm.expect(jsonData.subscription.customFields.customField[0].code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_CF_NOT_INHERITED\");",
											"    pm.expect(jsonData.subscription.customFields.customField[0].description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_CF_NOT_INHERITED\");",
											"    pm.expect(jsonData.subscription.customFields.customField[0].fieldType).to.eql(\"STRING\");",
											"    pm.expect(jsonData.subscription.customFields.customField[0].stringValue).to.eql(\"subscriptionCFNotInherited\");",
											"    pm.expect(jsonData.subscription.customFields.customField[1].code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_CF_INHERITED\");",
											"    pm.expect(jsonData.subscription.customFields.customField[1].description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_CF_INHERITED\");",
											"    pm.expect(jsonData.subscription.customFields.customField[1].fieldType).to.eql(\"STRING\");",
											"    pm.expect(jsonData.subscription.customFields.customField[1].stringValue).to.eql(\"SUB_INHERITED\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"userAccount\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"stringValue\": \"subscriptionCFNotInherited\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"stringValue\": \"SUB_INHERITED\"\n            }\n        ],\n        \"inheritedCustomField\": [\n            {\n                \"code\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"stringValue\": \"UA_INHERITED\"\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_InheritedCF",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_SUB_InheritedCF"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove CFT UA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49e69b10-a0bb-4ac8-af5e-0fd3037e6be4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_UA_CF_INHERITED/UserAccount",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"{{entityPrefix}}_UA_CF_INHERITED",
										"UserAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove CFT SUB",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06d67693-b6c4-4e60-af5a-533458537427",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_SUB_CF_INHERITED/Subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"{{entityPrefix}}_SUB_CF_INHERITED",
										"Subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove CFT SUB 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ee4ce83-0b3d-46a3-9ed1-22273b23b51b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_SUB_CF_NOT_INHERITED/Subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"{{entityPrefix}}_SUB_CF_NOT_INHERITED",
										"Subscription"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Inherited CF in Account",
					"item": [
						{
							"name": "Create CFT for CUST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7014b8a3-6722-45fc-beb9-60035949cbb8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"Customer\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CFT for BA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed1990cc-deae-43ec-840b-89830d67f2e8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"BillingAccount\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CFT for CA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32575fe8-7f13-4049-9e81-bfaa2ba00d3b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"CustomerAccount\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CFT for UA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee7b2edf-08a1-4eed-889b-d2dfa4149816",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"UserAccount\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AccountHierarchy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ef066e1-9137-4f32-a4d7-dbc4ac368100",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{entityPrefix}}_432@opencellsoft.net\",\n    \"paymentMethod\": \"2\",\n    \"customerId\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"sellerCode\": \"SELLER_FR\",\n    \"customerBrandCode\": \"DEFAULT\",\n    \"customerCategoryCode\": \"CLIENT\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"billingCycleCode\": \"CYC_INV_MT_1\",\n    \"titleCode\": \"MR\",\n    \"firstName\": \"firstName\",\n    \"lastName\": \"lastName\",\n    \"phoneNumber\": \"+102354749\",\n    \"address1\": \"Address1\",\n    \"address2\": \"Address2\",\n    \"zipCode\": \"75001\",\n    \"city\": \"Tunis\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23f41920-1635-45db-b837-0bc5878afaf0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"customerCategory\": \"CLIENT\",\n    \"seller\": \"SELLER_FR\",\n    \"customerBrand\": \"DEFAULT\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueC1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueC2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create customer account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be809d91-2352-482b-8f60-b5280cc60ef4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"customer\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"currency\": \"EUR\",\n    \"language\": \"FRA\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueCA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueCA2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create billing account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47cd1586-0a61-4848-8d42-9d291211d131",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2016-04-01\",\r\n    \"subscriptionDate\": \"2016-01-01\",\r\n    \"electronicBilling\": true,\r\n    \"status\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}@manaty.net\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueBA1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueBA2\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e44be03-5c6a-4919-82c7-3180460ece59",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_UA\",\r\n    \"billingAccount\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"address1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"address3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\",\r\n    \"status\": \"ACTIVE\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueUA1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueUA2\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find customer account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bb5fd29-2a33-4601-8fc9-8ff2e2cdd22e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customerAccount.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUST1\");",
											"    pm.expect(jsonData.customerAccount.customFields.customField[0].code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
											"    pm.expect(jsonData.customerAccount.customFields.customField[0].description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
											"    pm.expect(jsonData.customerAccount.customFields.customField[0].fieldType).to.eql(\"STRING\");",
											"    pm.expect(jsonData.customerAccount.customFields.customField[0].mapValue.MAT_1.value).to.eql(\"ValueCA1\");",
											"    pm.expect(jsonData.customerAccount.customFields.customField[0].mapValue.MAT_2.value).to.eql(\"ValueCA2\");",
											"    pm.expect(jsonData.customerAccount.customFields.customField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
											"",
											"    ",
											"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
											"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
											"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].fieldType).to.eql(\"STRING\");",
											"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].mapValue.MAT_1.value).to.eql(\"ValueC1\");",
											"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].mapValue.MAT_2.value).to.eql(\"ValueC2\");",
											"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\r\n                \"fieldType\": \"STRING\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueCA1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueCA2\"\r\n                    },\r\n                    \"key\": {\r\n                        \"value\": \"MAT_1/MAT_2\"\r\n                    }\r\n                }\r\n            }\r\n        ],\r\n        \"inheritedCustomField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\r\n                \"fieldType\": \"STRING\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueC1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueC2\"\r\n                    },\r\n                    \"key\": {\r\n                        \"value\": \"MAT_1/MAT_2\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CUST1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CUST1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find billing account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5257bc7c-bcd7-4748-8792-3589f6278f6d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.billingAccount.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUST1\");",
											"    pm.expect(jsonData.billingAccount.description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_BA\");",
											"    pm.expect(jsonData.billingAccount.customFields.customField[0].code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
											"    pm.expect(jsonData.billingAccount.customFields.customField[0].description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
											"    pm.expect(jsonData.billingAccount.customFields.customField[0].fieldType).to.eql(\"STRING\");",
											"    pm.expect(jsonData.billingAccount.customFields.customField[0].mapValue.MAT_1.value).to.eql(\"ValueBA1\");",
											"    pm.expect(jsonData.billingAccount.customFields.customField[0].mapValue.MAT_2.value).to.eql(\"ValueBA2\");",
											"    pm.expect(jsonData.billingAccount.customFields.customField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
											"",
											"    ",
											"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
											"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
											"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].fieldType).to.eql(\"STRING\");",
											"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].mapValue.MAT_1.value).to.eql(\"ValueCA1\");",
											"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].mapValue.MAT_2.value).to.eql(\"ValueCA2\");",
											"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_BA\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueBA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueBA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ],\n        \"inheritedCustomField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueCA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueCA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_CUST1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CUST1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find user account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "424b024a-a91f-488f-9cb4-494312fa7925",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.userAccount.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUST1\");",
											"    pm.expect(jsonData.userAccount.description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_UA\");",
											"    pm.expect(jsonData.userAccount.customFields.customField[0].code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
											"    pm.expect(jsonData.userAccount.customFields.customField[0].description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
											"    pm.expect(jsonData.userAccount.customFields.customField[0].fieldType).to.eql(\"STRING\");",
											"    pm.expect(jsonData.userAccount.customFields.customField[0].mapValue.MAT_1.value).to.eql(\"ValueUA1\");",
											"    pm.expect(jsonData.userAccount.customFields.customField[0].mapValue.MAT_2.value).to.eql(\"ValueUA2\");",
											"    pm.expect(jsonData.userAccount.customFields.customField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
											"",
											"    ",
											"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
											"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
											"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].fieldType).to.eql(\"STRING\");",
											"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].mapValue.MAT_1.value).to.eql(\"ValueBA1\");",
											"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].mapValue.MAT_2.value).to.eql(\"ValueBA2\");",
											"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_UA\",\n    \"customFields\": {\n        \"customField\": [\n            {\n            },\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueUA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueUA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ],\n        \"inheritedCustomField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueBA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueBA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_CUST1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CUST1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f316652f-ea39-4efd-a29c-64afdc328cd2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount/{{entityPrefix}}_{{index}}_CUST1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount",
										"{{entityPrefix}}_{{index}}_CUST1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Billing Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c0e229e-a8b3-4dab-925b-cbec7cdea6c4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount/{{entityPrefix}}_{{index}}_CUST1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount",
										"{{entityPrefix}}_{{index}}_CUST1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete CustomerAccount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16e4485f-3d92-470f-b2b0-7b0916223c1d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount/{{entityPrefix}}_{{index}}_CUST1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount",
										"{{entityPrefix}}_{{index}}_CUST1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "572becc6-84eb-4b36-bf4b-830fbdad6035",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CUST1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"{{entityPrefix}}_{{index}}_CUST1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove CFT UA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "739545d7-7a7c-492d-838d-afc503952927",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/UserAccount",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
										"UserAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove CFT BA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c91d1210-e1e7-4553-b1f9-0d73cc818e52",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/BillingAccount",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
										"BillingAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove CFT CA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ad10ac5-3e0b-44cb-b951-84d6fa563a91",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/CustomerAccount",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
										"CustomerAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove CFT CUST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93b35f4b-da0b-4e13-bd1e-5de2b73c8ed0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/Customer",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
										"Customer"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "be2ac2b6-5665-48b3-a52a-d39132bcadfb",
						"type": "text/javascript",
						"exec": [
							"pm.globals.set(\"index\", 460);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "60bfa884-6c57-478c-8e7d-1eaf00227c82",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "EL expression tests",
			"item": [
				{
					"name": "Calling script from EL",
					"item": [
						{
							"name": "Create script",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb5a7fc6-95c0-464d-9df3-af4270a8b0aa",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;           \\n            import java.util.Map;\\n            import java.math.BigDecimal;\\n            import org.meveo.admin.exception.BusinessException;\\n            import org.meveo.model.admin.User;\\n            import org.meveo.model.crm.Provider;\\n            import org.meveo.model.BusinessEntity;\\n            import org.slf4j.Logger;\\n            import org.slf4j.LoggerFactory;\\n            public class The{{baseEntityPrefix}}_ScriptEL extends Script {\\n                private static final Logger log = LoggerFactory.getLogger(The{{baseEntityPrefix}}_ScriptEL.class);\\n                public void execute(Map<String,Object> context) throws BusinessException{\\n                    log.debug(\\\"The{{baseEntityPrefix}}_ScriptEL called\\\");\\n                    context.put(Script.RESULT_VALUE, ((BusinessEntity)context.get(Script.CONTEXT_ENTITY)).getCode()!=null && ((BusinessEntity)context.get(Script.CONTEXT_ENTITY)).getCode().startsWith(\\\"EL_\\\"));                 \\n                }\\n            }\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"scriptInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CFT on Charge",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "413ddaf6-9c98-4a2a-8776-7a3518c0fa6c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_CFT_EL_SCRIPT\",\n    \"description\": \"Field visible on entities with code starting 'EL_'\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"ChargeTemplate\",\n    \"defaultValue\": \"KUKU\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": true,\n    \"applicableOnEl\": \"#{mv:executeScript(entity,'org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL', null, entity.auditable.creator)}\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Recuring Charge OK",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9cd8ffe8-fca9-410c-8808-f9eea8e3a5ad",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_REC1\",\n    \"invoiceSubCategory\": \"SUB_DATA\",\n    \"calendar\": \"MONTHLY\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove CFT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee064a0f-c1e1-48d3-b810-94d38bc279a1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customFieldTemplateCode\": \"{{baseEntityPrefix}}_CFT_EL_SCRIPT\",\n    \"appliesTo\": \"ChargeTemplate\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/{{baseEntityPrefix}}_CFT_EL_SCRIPT/ChargeTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"{{baseEntityPrefix}}_CFT_EL_SCRIPT",
										"ChargeTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Script Instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b00272d-045e-4fe0-b0e4-47db302b215d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"removeScriptInstanceRequest\": \"org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"scriptInstance",
										"org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Charge filter expression",
					"item": [
						{
							"name": "Update recurring 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "682336c1-1067-4a0d-99b4-bbb4a4574882",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_REC3\",\n    \"description\": \"{{baseEntityPrefix}}_REC3\",\n    \"invoiceSubCategory\": \"SUB_DATA\",\n    \"disabled\": false,\n    \"amountEditable\": false,\n    \"languageDescriptions\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\n        }\n    ],\n    \"calendar\": \"MONTHLY\",\n    \"subscriptionProrata\": true,\n    \"terminationProrata\": true,\n    \"applyInAdvance\": true,\n    \"inputUnitDescription\": \"1\",\n    \"ratingUnitDescription\": \"1\",\n    \"unitMultiplicator\": \"1\",\n    \"unitNbDecimal\": \"2\",\n    \"durationTermInMonth\": \"4\",\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"triggeredEdrs\": {\n        \"triggeredEdr\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\n            }\n        ]\n    },\n    \"filterExpression\": false\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86f03f3d-a411-4a4b-a25c-78efe0b8165e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CHARGE_FILTER\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_2\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\n    \"subscriptionDate\": \"2018-01-01\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate services",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e015d86a-25ce-4d68-b772-a9c6e537d8e3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_CHARGE_FILTER\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"quantity\": \"2\",\n                \"subscriptionDate\": \"2018-01-01\"\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57816d8e-e89c-4ff9-895c-1f609a15c089",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CHARGE_FILTER\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_CHARGE_FILTER",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{entityPrefix}}_{{index}}_CHARGE_FILTER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update recurring 3 - restore",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60e5688f-d85f-4904-b6bd-30dffeac41d0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_REC3\",\n    \"description\": \"{{baseEntityPrefix}}_REC3\",\n    \"invoiceSubCategory\": \"SUB_DATA\",\n    \"disabled\": false,\n    \"amountEditable\": false,\n    \"languageDescriptions\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\n        }\n    ],\n    \"calendar\": \"MONTHLY\",\n    \"subscriptionProrata\": true,\n    \"terminationProrata\": true,\n    \"applyInAdvance\": true,\n    \"inputUnitDescription\": \"1\",\n    \"ratingUnitDescription\": \"1\",\n    \"unitMultiplicator\": \"1\",\n    \"unitNbDecimal\": \"2\",\n    \"durationTermInMonth\": \"4\",\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"triggeredEdrs\": {\n        \"triggeredEdr\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "InvoiceType - EL AO",
					"item": [
						{
							"name": "Create Service1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5038c17-c58d-4d7b-a6bb-692542dcffab",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_EL_INV_SERVICE1\",\n    \"description\": \"{{entityPrefix}}_EL_INV_SERVICE1\",\n    \"serviceChargeTemplateUsages\": {\n        \"serviceChargeTemplateUsage\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_USAGE1\"\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Offer1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce8b4746-c872-4c2f-9652-b528000b832d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_EL_INV_OFFER1\",\n    \"description\": \"{{entityPrefix}}_EL_INV_OFFER1\",\n    \"name\": \"{{baseEntityPrefix}}_EL_INV_OFFER1\",\n    \"disabled\": false,\n    \"offerServiceTemplate\": [\n        {\n            \"serviceTemplate\": {\n                \"code\": \"{{entityPrefix}}_EL_INV_SERVICE1\"\n            }\n        }\n    ],\n    \"lifeCycleStatus\": \"ACTIVE\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create InvoiceType - EL AO",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "849c87e5-4fe4-4d8b-a70e-a07e9c17a4bf",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_InvTypeElAO\",\n    \"description\": \"{{entityPrefix}}_{{index}}_Description_Created\",\n    \"occTemplateCode\": \"INV_REB\",\n    \"occTemplateNegativeCode\": \"PAY_TIP\",\n    \"sequenceDto\": {\n        \"prefixEL\": \"Fact_\",\n        \"sequenceSize\": \"2\",\n        \"currentInvoiceNb\": \"1\"\n    },\n    \"sellerSequence\": {\n        \"SELLER_FR\": {\n            \"prefixEL\": \"SellFact_\",\n            \"sequenceSize\": \"9\",\n            \"currentInvoiceNb\": \"9\"\n        }\n    },\n    \"appliesTo\": [\n        \"COM\"\n    ],\n    \"matchingAuto\": false,\n    \"billingTemplateName\": \"BTN\",\n    \"billingTemplateNameEL\": \"DEMO_#{invoice.id}\",\n    \"occTemplateCodeEl\": \"#{invoice.invoiceNumber.startsWith(\\\"Fact_\\\")?\\\"INV_STD\\\":\\\"INV_REB\\\"}\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create BillingCycle - EL AO",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c681d698-e7b4-4e19-89f3-391c16239d63",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_BC_ElAO\",\n    \"description\": \"{{entityPrefix}}_{{index}}_BC_ElAO\",\n    \"dueDateDelay\": \"1\",\n    \"calendar\": \"MONTHLY\",\n    \"invoiceDateDelay\": \"1\",\n    \"invoiceTypeCode\": \"{{entityPrefix}}_{{index}}_InvTypeElAO\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billingCycle",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AccountHierarchy - EL AO",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bbb28d8f-36d5-47bb-b206-062b48b69db0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{entityPrefix}}_43@manaty.net\",\n    \"customerId\": \"{{entityPrefix}}_{{index}}_INV_CUST_ElAO\",\n    \"sellerCode\": \"SELLER_US\",\n    \"customerBrandCode\": \"DEFAULT\",\n    \"customerCategoryCode\": \"CLIENT\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"billingCycleCode\": \"{{entityPrefix}}_{{index}}_BC_ElAO\",\n    \"titleCode\": \"MR\",\n    \"firstName\": \"toto\",\n    \"lastName\": \"toc\",\n    \"phoneNumber\": \"+102354749\",\n    \"address1\": \"Address1\",\n    \"address2\": \"Address2\",\n    \"zipCode\": \"4050\",\n    \"city\": \"Los Banana\",\n    \"methodOfPayment\": [\n        {\n            \"paymentMethodType\": \"DIRECTDEBIT\",\n            \"bankCoordinates\": {\n                \"bankCode\": \"12456\",\n                \"branchCode\": \"23456\",\n                \"accountNumber\": \"34589324756\",\n                \"key\": \"45\",\n                \"iban\": \"1212\",\n                \"bic\": \"67789456\",\n                \"accountOwner\": \"Me and co\",\n                \"bankName\": \"Some bank\",\n                \"bankId\": \"78946\",\n                \"issuerNumber\": \"46789\",\n                \"issuerName\": \"Some issuer\",\n                \"ics\": \"5587\"\n            }\n        }\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create subscription - EL AO",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "783f0bcf-a201-4e3a-9566-4fcae5af7035",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\",\n    \"description\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\",\n    \"userAccount\": \"UA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO\",\n    \"offerTemplate\": \"{{entityPrefix}}_EL_INV_OFFER1\",\n    \"subscriptionDate\": \"2050-10-13\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create access - EL AO",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6fef5f3-3e92-41c3-9ea3-ace3a12e4b6a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_INV_SUB_ACCESS_ElAO\",\n    \"subscription\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/access/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"access",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate service - EL AO",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8658ee1-2c42-4340-b5e5-113720fdeb70",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{entityPrefix}}_EL_INV_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2050-10-13\"\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Charge CDR - EL AO",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0a253dd-836f-4624-92d3-c7ecf25aec25",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "2050-10-13T00:00:00.000Z;1;{{entityPrefix}}_{{index}}_INV_SUB_ACCESS_ElAO;USAGE",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/mediation/chargeCdr",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"mediation",
										"chargeCdr"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate invoice - EL AO",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ce00905-9e0f-45b5-b54b-ccffd265ffff",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"targetCode\": \"BA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO\",\n    \"targetType\": \"BILLINGACCOUNT\",\n    \"invoicingDate\": \"2050-10-15\",\n    \"firstTransactionDate\": \"2050-10-01\",\n    \"lastTransactionDate\": \"2050-10-31\",\n    \"generatePDF\": false\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoice/generateInvoice",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoice",
										"generateInvoice"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create DDRequestLotOp - EL AO",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf50a352-1709-406e-aafd-899394c0ebe8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fromDueDate\": \"2050-01-01T00:00:00Z\",\n    \"toDueDate\": \"2051-01-01T00:00:00Z\",\n    \"ddrequestOp\": \"CREATE\",\n    \"status\": \"WAIT\",\n    \"ddRequestBuilderCode\": \"SEPA_STD\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/ddrequestLotOp",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"ddrequestLotOp"
									]
								}
							},
							"response": []
						},
						{
							"name": "AO Job - EL AO",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dcb99ad7-37e9-4ff7-ab8d-e1a7b7c7bb34",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"AO_Job\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/job/execute",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Account operations - EL AO",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da490f2d-1a46-44f7-8095-836da8b6dcf4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"actionStatus\": {\r\n        \"status\": \"SUCCESS\"\r\n    },\r\n    \"paging\": {\r\n        \"fullTextFilter\": null,\r\n        \"filters\": {\r\n            \"customerAccount.code\": \"CA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO\"\r\n        },\r\n        \"fields\": null,\r\n        \"offset\": null,\r\n        \"limit\": null,\r\n        \"sortBy\": \"id\",\r\n        \"sortOrder\": \"DESCENDING\",\r\n        \"totalNumberOfRecords\": 2,\r\n        \"loadReferenceDepth\": 0\r\n    },\r\n    \"accountOperations\": {\r\n        \"accountOperation\": [\r\n            {\r\n                \"id\": 2,\r\n                \"dueDate\": 2549491200000,\r\n                \"type\": \"I\",\r\n                \"transactionDate\": 2549404800000,\r\n                \"transactionCategory\": \"DEBIT\",\r\n                \"reference\": \"Fact_03\",\r\n                \"accountCode\": \"411000000\",\r\n                \"accountingCode\": \"411000000\",\r\n                \"accountCodeClientSide\": \"445510000\",\r\n                \"amount\": 21.240000000000,\r\n                \"amountWithoutTax\": 18.000000000000,\r\n                \"taxAmount\": 3.240000000000,\r\n                \"matchingAmount\": 0E-12,\r\n                \"unMatchingAmount\": 21.240000000000,\r\n                \"matchingStatus\": \"O\",\r\n                \"code\": \"INV_STD\",\r\n                \"description\": \"Standard invoice sub-item\",\r\n                \"excludedFromDunning\": false,\r\n                \"orderNumber\": \"\",\r\n                \"paymentMethod\": \"DIRECTDEBIT\"\r\n            },\r\n            {\r\n                \"id\": 1,\r\n                \"dueDate\": 2549491200000,\r\n                \"type\": \"I\",\r\n                \"transactionDate\": 2549404800000,\r\n                \"transactionCategory\": \"DEBIT\",\r\n                \"reference\": \"Fact_02\",\r\n                \"accountCode\": \"411000000\",\r\n                \"accountingCode\": \"411000000\",\r\n                \"accountCodeClientSide\": \"445510000\",\r\n                \"amount\": 10.620000000000,\r\n                \"amountWithoutTax\": 9.000000000000,\r\n                \"taxAmount\": 1.620000000000,\r\n                \"matchingAmount\": 0E-12,\r\n                \"unMatchingAmount\": 10.620000000000,\r\n                \"matchingStatus\": \"O\",\r\n                \"code\": \"INV_STD\",\r\n                \"description\": \"Standard invoice sub-item\",\r\n                \"excludedFromDunning\": false,\r\n                \"orderNumber\": \"\",\r\n                \"paymentMethod\": \"DIRECTDEBIT\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/accountOperation/list?customerAccountCode=CA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"accountOperation",
										"list"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "CA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1e354a8a-7e79-4346-9ca3-3c30977557b7",
						"type": "text/javascript",
						"exec": [
							"pm.globals.set(\"index\", 73);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ee198946-3fba-4969-86ed-9f5483b452e5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Custom Fields in Filters",
			"item": [
				{
					"name": "Setup Test Data",
					"item": [
						{
							"name": "Create Test Subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93da5911-b6d1-4178-9e8b-262467e1b51d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_TEST_SUB\",\n    \"description\": \"{{baseEntityPrefix}}_TEST_SUB\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"subscriptionDate\": \"2016-06-01\",\n    \"endAgreementDate\": \"2016-06-30\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Access",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b85f58df-3a6e-4e59-afb2-8f694f5a1b27",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_TEST_ACCP\",\n    \"subscription\": \"{{baseEntityPrefix}}_TEST_SUB\",\n    \"startDate\": \"2016-06-01\",\n    \"endDate\": \"2016-06-30\"\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/access/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"access",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Billing Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8afc9f13-7925-41a6-910b-9e5d8809b687",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_TEST_BA\",\n    \"description\": \"{{baseEntityPrefix}}_TEST_BA\",\n    \"externalRef1\": \"EXTREF1\",\n    \"externalRef2\": \"EXTREF2\",\n    \"name\": {\n      \"title\": \"MR\",\n      \"firstName\": \"ABC123\",\n      \"lastName\": \"DEF456\"\n    },\n    \"address\": {\n      \"address1\": \"adress1\",\n      \"address2\": \"address2\",\n      \"address3\": \"adress3\",\n      \"zipCode\": \"21000\",\n      \"city\": \"Dijon\",\n      \"country\": \"FR\"\n    },\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA\",\n    \"billingCycle\": \"CYC_INV_MT_1\",\n    \"country\": \"FR\",\n    \"language\": \"FRA\",\n    \"nextInvoiceDate\": \"2015-04-01\",\n    \"subscriptionDate\": \"2015-01-01\",\n    \"electronicBilling\": \"true\",\n    \"email\": \"ABC123@manaty.net\"\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create priceplan recurring",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40b4ceea-40e1-4204-9588-746be1844591",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_TEST_REC1\",\n    \"description\": \"{{baseEntityPrefix}}_TEST_REC1\",\n    \"eventCode\": \"{{baseEntityPrefix}}_REC1\",\n    \"amountWithoutTax\": \"10\",\n    \"amountWithTax\": \"12\",\n    \"startRatingDate\": \"2016-06-01\",\n    \"endRatingDate\": \"2016-06-30\",\n    \"priority\": \"1\",\n    \"minSubscriptionAgeInMonth\": \"6\",\n    \"maxSubscriptionAgeInMonth\": \"12\"\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create priceplan OneShot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a7cfdda-8a51-4bf6-a954-d3d64e34e7df",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_TEST_OS1\",\n    \"description\": \"{{baseEntityPrefix}}_TEST_OS1\",\n    \"eventCode\": \"{{baseEntityPrefix}}_OS1\",\n    \"amountWithoutTax\": \"11\",\n    \"amountWithTax\": \"15\",\n    \"startRatingDate\": \"2016-06-01\",\n    \"endRatingDate\": \"2016-06-15\",\n    \"priority\": \"1\",\n    \"minSubscriptionAgeInMonth\": \"6\",\n    \"maxSubscriptionAgeInMonth\": \"12\"\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create priceplan usage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7b3fec3-7c30-4c33-9553-faf079cc2689",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_TEST_USAGE1\",\n    \"description\": \"{{baseEntityPrefix}}_TEST_USAGE1\",\n    \"eventCode\": \"{{baseEntityPrefix}}_USAGE1\",\n    \"amountWithoutTax\": \"9\",\n    \"amountWithTax\": \"14\",\n    \"startRatingDate\": \"2016-06-15\",\n    \"endRatingDate\": \"2016-06-30\",\n    \"priority\": \"1\",\n    \"minSubscriptionAgeInMonth\": \"12\",\n    \"maxSubscriptionAgeInMonth\": \"24\"\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create recurring charge template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6f36798-859e-462e-8383-cb48e3bd926a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_REC100\",\n    \"invoiceSubCategory\": \"SUB_DATA\",\n    \"calendar\": \"MONTHLY\",\n    \"durationTermInMonth\": \"10\",\n    \"taxClassCode\": \"{{baseEntityPrefix}}_taxClass\"\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Setup Filters",
					"item": [
						{
							"name": "Create Access Filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6094eb78-4fb7-4535-942f-7df360baf6ec",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_Access\",\n    \"description\": \"Subscription with Start and End Date\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.mediation.Access</targetEntity>\\n                <alias>a</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>startDate</field>\\n                  <field>endDate</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>startDate</fieldName>\\n                                <operator>>=</operator>\\n                                <operand>cfDate:ACCESS_START_DATE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                            <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>endDate</fieldName>\\n                                <operator><![CDATA[<=]]></operator>\\n                                <operand>cfDate:ACCESS_END_DATE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>subscription</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfEntity:ACCESS_SUBSCRIPTION</operand>\\n                                <className>org.meveo.model.billing.Subscription</className>\\n                                <label>Subscription</label>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filter/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filter",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Plan Filter - Rating date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "924f8c2b-16f3-4fd1-bfa8-a5041b17158d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix\",\n    \"description\": \"Start and End Rating Dates\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.catalog.PricePlanMatrix</targetEntity>\\n                <alias>p</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>eventCode</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>startRatingDate</fieldName>\\n                                <operator>>=</operator>\\n                                <operand>cfDate:PRICE_PLAN_START_RATING_DATE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                            <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>endRatingDate</fieldName>\\n                                <operator><![CDATA[<=]]></operator>\\n                                <operand>cfDate:PRICE_PLAN_END_RATING_DATE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filter/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filter",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Plan Filter by Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecdc8dc7-ac05-43d6-9d52-4366de2fd5c1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix_Code\",\n    \"description\": \"Priceplan by code\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.catalog.PricePlanMatrix</targetEntity>\\n                <alias>p</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>eventCode</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>code</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfString:PRICE_PLAN_CODE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>                    \\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filter/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filter",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Plan Filter by Amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdbfed29-1718-4026-a103-2a7d2b8943b1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix_Amount\",\n    \"description\": \"Priceplan by code\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.catalog.PricePlanMatrix</targetEntity>\\n                <alias>p</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>eventCode</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>amountWithoutTax</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfDecimal:AMOUNT</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>                    \\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filter/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filter",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Plan Filter Age",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "790ad169-7f97-4a48-ab96-c914d5a0abd6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix_Age\",\n    \"description\": \"PP by Age\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.catalog.PricePlanMatrix</targetEntity>\\n                <alias>p</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>eventCode</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>minSubscriptionAgeInMonth</fieldName>\\n                                <operator>>=</operator>\\n                                <operand>cfLong:MIN_SUBSCR_AGE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                            <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>maxSubscriptionAgeInMonth</fieldName>\\n                                <operator><![CDATA[<=]]></operator>\\n                                <operand>cfLong:MAX_SUBSCR_AGE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filter/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filter",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Billing Account Filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5803eca4-009f-48cb-94ea-934e0e3cb7bf",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_Billing_Account\",\n    \"description\": \"Multi Fields\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.billing.BillingAccount</targetEntity>\\n                <alias>ba</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>statusDate</field>\\n                  <field>email</field>\\n                  <field>nextInvoiceDate</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"orCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_OR</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>statusDate</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfDate:BILLING_ACCOUNT_STATUS_DATE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                        <filterCondition class=\\\"orCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_OR</filterConditionType>\\n                        <filterConditions>\\n                            <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>email</fieldName>\\n                                <operator>LIKE</operator>\\n                                <operand>cfString:BILLING_ACCOUNT_EMAIL</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                    <filterCondition class=\\\"orCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_OR</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>customerAccount</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfEntity:BILLING_ACCOUNT_CUSTOMER_ACCOUNT</operand>\\n                                <className>org.meveo.model.payments.CustomerAccount</className>\\n                                <label>Customer Account</label>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                        <filterCondition class=\\\"orCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_OR</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>brAmountWithTax</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfDecimal:BILLING_ACCOUNT_AMOUNT_WITH_TAX</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filter/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filter",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Billing Account Filter enum",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5739d87b-28a0-4714-9801-7a8af4dfedc6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_Billing_Account_Enum\",\n    \"description\": \"Multi Fields\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.billing.BillingAccount</targetEntity>\\n                <alias>ba</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>statusDate</field>\\n                  <field>email</field>\\n                  <field>nextInvoiceDate</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"orCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_OR</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>paymentTerm</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfDate:PAYMENT_TERMS</operand>\\n                                <className>org.meveo.model.payments.PaymentTermEnum</className>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>                        \\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filter/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filter",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Recurring charge template Filter by Duration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8606b38-54f3-45a4-81bd-db40a8c9655f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_RCT_Duration\",\n    \"description\": \"RCT by duration\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.catalog.RecurringChargeTemplate</targetEntity>\\n                <alias>p</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>eventCode</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>durationTermInMonth</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfInteger:DURATION</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>                    \\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filter/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filter",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Recurring charge template Filter by Prorata",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "485f1e6d-b7b5-453b-939e-a2d21e7e3bac",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_RCT_Prorata\",\n    \"description\": \"RCT by Prorata\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.catalog.RecurringChargeTemplate</targetEntity>\\n                <alias>p</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>eventCode</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>subscriptionProrata</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfBoolean:SUBSCRIPTION_PRORATA</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>                    \\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filter/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filter",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Search with Filters",
					"item": [
						{
							"name": "Search PP by date - date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3cdb3032-9f1c-4e57-895d-10acd90e6542",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filter\": {\n      \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix\"\n    },\n    \"parameters\": {\n      \"entry\": [\n        {\n          \"key\": \"PRICE_PLAN_START_RATING_DATE\",\n          \"value\": \"cfDate:2016-06-01\"\n        },\n        {\n          \"key\": \"PRICE_PLAN_END_RATING_DATE\",\n          \"value\": \"cfDate:2016-06-30\"\n        }\n      ]\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filteredList",
										"listByFilter"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "100"
										},
										{
											"key": "query",
											"value": "PRICE_PLAN_START_RATING_DATE:cfDate:2016-06-01&PRICE_PLAN_END_RATING_DATE:cfDate:2016-06-30",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search PP by code - string",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14520c6e-a26f-4ad5-8301-e421846521b1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filter\": {\n      \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix_Code\"\n    },\n    \"parameters\": {\n      \"entry\": {\n        \"key\": \"PRICE_PLAN_CODE\",\n        \"value\": \"cfString:{{baseEntityPrefix}}_TEST_REC1\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filteredList",
										"listByFilter"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search PP by amount - decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462f22d9-0781-4dbc-97c1-1ecd5ab58730",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filter\": {\n      \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix_Amount\"\n    },\n    \"parameters\": {\n      \"entry\": {\n        \"key\": \"AMOUNT\",\n        \"value\": \"cfDecimal:10\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filteredList",
										"listByFilter"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search PP by age - long",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42de7022-3de9-4251-826e-68ecdb2d928a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filter\": {\n      \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix_Age\"\n    },\n    \"from\": \"0\",\n    \"size\": \"100\",\n    \"parameters\": {\n      \"entry\": [\n        {\n          \"key\": \"MIN_SUBSCR_AGE\",\n          \"value\": \"cfLong:6\"\n        },\n        {\n          \"key\": \"MAX_SUBSCR_AGE\",\n          \"value\": \"cfLong:12\"\n        }\n      ]\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filteredList",
										"listByFilter"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search RCT by duration - integer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c3d9c92-e025-462c-b9c7-71d1d12d3cfe",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filter\": {\n      \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_RCT_Duration\"\n    },\n    \"parameters\": {\n      \"entry\": {\n        \"key\": \"DURATION\",\n        \"value\": \"cfInteger:10\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filteredList",
										"listByFilter"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search RCT by prorata - boolean",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5d786e2-27f5-4869-8f72-39b8164c929b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filter\": {\n      \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_RCT_Prorata\"\n    },\n    \"parameters\": {\n      \"entry\": {\n        \"key\": \"SUBSCRIPTION_PRORATA\",\n        \"value\": \"cfBoolean:true\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filteredList",
										"listByFilter"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "100"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Test Data Cleanup",
					"item": [
						{
							"name": "Remove recurring charge template",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c854257-41bc-442e-ab89-b3683b132073",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"recurringChargeTemplateCode\": \"{{entityPrefix}}_{{index}}_REC100\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{entityPrefix}}_{{index}}_REC100",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate",
										"{{entityPrefix}}_{{index}}_REC100"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Access",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c625566-c19b-4841-ad95-54cc7f061d4e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/access/{{baseEntityPrefix}}_TEST_ACCP/{{baseEntityPrefix}}_TEST_SUB/2016-06-01/2016-06-30",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"access",
										"{{baseEntityPrefix}}_TEST_ACCP",
										"{{baseEntityPrefix}}_TEST_SUB",
										"2016-06-01",
										"2016-06-30"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Billing Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dcc0e101-2148-49f3-b7bb-1c9475a44e16",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:removeBillingAccount\": {\n        \"billingAccountCode\": \"{{baseEntityPrefix}}_TEST_BA\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount/{{baseEntityPrefix}}_TEST_BA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount",
										"{{baseEntityPrefix}}_TEST_BA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove priceplan recurring",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "deb8802b-bb18-44ef-b990-9598fa000cf0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:removePricePlan\": {\n        \"pricePlanCode\": \"{{baseEntityPrefix}}_TEST_REC1\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/{{baseEntityPrefix}}_TEST_REC1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"{{baseEntityPrefix}}_TEST_REC1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove priceplan OneShot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9d6340d-656f-44c1-b3f9-678dfb6dd053",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:removePricePlan\": {\n        \"pricePlanCode\": \"{{baseEntityPrefix}}_TEST_OS1\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/{{baseEntityPrefix}}_TEST_OS1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"{{baseEntityPrefix}}_TEST_OS1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove priceplan usage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebfa7a60-fd44-405b-8a40-fd0c0233101c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:removePricePlan\": {\n        \"pricePlanCode\": \"{{baseEntityPrefix}}_TEST_USAGE1\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/{{baseEntityPrefix}}_TEST_USAGE1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"{{baseEntityPrefix}}_TEST_USAGE1"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "44bdb51d-4f51-4a80-8494-b1897825b920",
						"type": "text/javascript",
						"exec": [
							"pm.globals.set(\"index\", 641);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "572ba40e-b5c5-4401-8c7e-a1e5eca304b5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Entity Customization",
			"item": [
				{
					"name": "Reference Entity",
					"item": [
						{
							"name": "Create CFT with reference entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb63cea7-b79e-46ff-a6dc-815f3ab33309",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RCF100\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RCF100\",\n    \"fieldType\": \"ENTITY\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"entityClazz\": \"org.meveo.model.crm.Customer\",\n    \"storageType\": \"SINGLE\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get reference entities - no wildcard",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c2d51fc-796c-4f54-bf31-7e8e69daac94",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.businessEntities.length).to.eql(4);",
											"    pm.expect(jsonData.businessEntities[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_CUST\");",
											"    pm.expect(jsonData.businessEntities[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_CUST_2\");",
											"    pm.expect(jsonData.businessEntities[2].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_CUST_3\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RCF100\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/listBusinessEntityForCFVByCode/?code={{entityPrefix}}_{{index}}_RCF100",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"listBusinessEntityForCFVByCode",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "{{entityPrefix}}_{{index}}_RCF100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get reference entities - with wildcard",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ac5d73f-2c56-44a2-b77e-8d9f58e5380b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.businessEntities.length).to.eql(1);",
											"    pm.expect(jsonData.businessEntities[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_CUST_2\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RCF100\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/listBusinessEntityForCFVByCode/?code={{entityPrefix}}_{{index}}_RCF100&wildcode=2",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"listBusinessEntityForCFVByCode",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "{{entityPrefix}}_{{index}}_RCF100"
										},
										{
											"key": "wildcode",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "List per entity instance - el evaluated",
					"item": [
						{
							"name": "Create CFT Offer visible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41dcf5e0-830a-41f2-920c-50fe9e843b8b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"VISIBLE\",\n    \"applicableOnEl\": \"#{entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CFT Offer hidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc9bf4c6-06c9-4f95-8398-5bd482e007e4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_HIDDEN_100\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_HIDDEN_100\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"HIDDEN\",\n    \"applicableOnEl\": \"#{!entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"field",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Query visible CFT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad684bc9-24b1-4bfc-a18c-5a39995460f1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.entityCustomization.field[0].code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.entityCustomization.field[0].description).to.deep.equal(jsonBody.description);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\":\"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\",\n    \"description\":\"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/entity/listELFiltered?appliesTo=OfferTemplate&entityCode={{baseEntityPrefix}}_OFFER1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"entity",
										"listELFiltered"
									],
									"query": [
										{
											"key": "appliesTo",
											"value": "OfferTemplate"
										},
										{
											"key": "entityCode",
											"value": "{{baseEntityPrefix}}_OFFER1"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "List entity action",
					"item": [
						{
							"name": "Create script",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d33f48a8-381d-46a3-852f-b28dbfd5cc11",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"executeAction\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;\\n    \\n    import java.util.Map;\\n    import java.math.BigDecimal;\\n    import org.meveo.admin.exception.BusinessException;\\n    import org.meveo.model.admin.User;\\n    import org.meveo.model.crm.Provider;\\n    import org.slf4j.Logger;\\n    import org.slf4j.LoggerFactory;\\n    import org.meveo.service.catalog.impl.OfferTemplateService;\\n    import org.meveo.model.catalog.OfferTemplate;\\n    \\n    public class ExecuteCustomAction_{{index}}_Script extends Script {\\n      \\n        private static final Logger log = LoggerFactory.getLogger(ExecuteCustomAction_{{index}}_Script.class);\\n        private OfferTemplateService offerTemplateService = (OfferTemplateService)getServiceInterface(\\\"OfferTemplateService\\\");\\n    \\n        public void execute(Map<String,Object> context) throws BusinessException{\\n            OfferTemplate offerTemplate = (OfferTemplate) context.get(Script.CONTEXT_ENTITY);\\n            offerTemplate.setDescription(\\\"action executed\\\");\\n        }\\n    }\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"scriptInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create custom action hidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4d1123d-3bb2-4ef6-9adb-2446388bfaf8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}_HIDDEN\",\n    \"description\": \"ExecuteCustomAction_{{index}}_HIDDEN\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"script\": {\n        \"code\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n    },\n    \"applicableOnEl\": \"#{!entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/action/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"action",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create custom action visible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fbfc2f8-ccb5-4186-8508-0e0e9634ae8f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"description\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"script\": {\n        \"code\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n    },\n    \"applicableOnEl\": \"#{entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/action/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"action",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "List visible CA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a8348eb-1e86-4b35-a398-0e4b5fa80b05",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.entityCustomization.action[0].code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.entityCustomization.action[0].description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.entityCustomization.action[0].appliesTo).to.deep.equal(jsonBody.appliesTo);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"description\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"appliesTo\": \"OfferTemplate\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/entity/listELFiltered?appliesTo=OfferTemplate&entityCode={{baseEntityPrefix}}_OFFER1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"entity",
										"listELFiltered"
									],
									"query": [
										{
											"key": "appliesTo",
											"value": "OfferTemplate"
										},
										{
											"key": "entityCode",
											"value": "{{baseEntityPrefix}}_OFFER1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete custom action hidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67e256ad-e626-445f-85b6-3f01e33ebb5d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/action/ExecuteCustomAction_{{index}}_HIDDEN/OfferTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"action",
										"ExecuteCustomAction_{{index}}_HIDDEN",
										"OfferTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete custom action visible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca95030a-1e7b-4ede-a928-61017dea0262",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/action/ExecuteCustomAction_{{index}}_VISIBLE/OfferTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"action",
										"ExecuteCustomAction_{{index}}_VISIBLE",
										"OfferTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete script",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36cef6ce-60e4-443d-9f4e-1bacc5e8ed73",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.ExecuteCustomAction_{{index}}_Script",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"scriptInstance",
										"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Execute entity action",
					"item": [
						{
							"name": "Create script",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70238887-26b4-4dea-aa8c-303dbad0320f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"executeAction\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;\\n    \\n    import java.util.Map;\\n    import java.math.BigDecimal;\\n    import org.meveo.admin.exception.BusinessException;\\n    import org.meveo.model.admin.User;\\n    import org.meveo.model.crm.Provider;\\n    import org.slf4j.Logger;\\n    import org.slf4j.LoggerFactory;\\n    import org.meveo.service.catalog.impl.OfferTemplateService;\\n    import org.meveo.model.catalog.OfferTemplate;\\n    \\n    public class ExecuteCustomAction_{{index}}_Script extends Script {\\n      \\n        private static final Logger log = LoggerFactory.getLogger(ExecuteCustomAction_{{index}}_Script.class);\\n        private OfferTemplateService offerTemplateService = (OfferTemplateService)getServiceInterface(\\\"OfferTemplateService\\\");\\n    \\n        public void execute(Map<String,Object> context) throws BusinessException{\\n            OfferTemplate offerTemplate = (OfferTemplate) context.get(Script.CONTEXT_ENTITY);\\n            offerTemplate.setDescription(\\\"action executed\\\");\\n        }\\n    }\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"scriptInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create custom action",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f5faf06-fe39-4c3e-a829-81a35cb68c4c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}\",\n    \"description\": \"ExecuteCustomAction_{{index}}\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"script\": {\n        \"code\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/action/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"action",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Execute action",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e95b827-6f84-4fcc-a982-45a335cc3f90",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"actionCode\": \"ExecuteCustomAction_{{index}}\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"entityCode\": \"{{baseEntityPrefix}}_OFFER3\"\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/entity/action/execute/ExecuteCustomAction_{{index}}/OfferTemplate/{{baseEntityPrefix}}_OFFER3",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"entity",
										"action",
										"execute",
										"ExecuteCustomAction_{{index}}",
										"OfferTemplate",
										"{{baseEntityPrefix}}_OFFER3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find offer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "205cd885-77b1-4015-85f5-0d1ea8c075dd",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"    pm.expect(jsonData.offerTemplate.description).to.deep.equal(jsonBody.description);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"action executed\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{baseEntityPrefix}}_OFFER3",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									],
									"query": [
										{
											"key": "offerTemplateCode",
											"value": "{{baseEntityPrefix}}_OFFER3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete custom action",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a9e448a-2ad6-491f-80a6-570719cc2b5d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"actionCode\": \"ExecuteCustomAction_{{index}}\",\n    \"appliesTo\": \"OfferTemplate\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/entityCustomization/action/ExecuteCustomAction_{{index}}/OfferTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"entityCustomization",
										"action",
										"ExecuteCustomAction_{{index}}",
										"OfferTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete script",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24af3ae0-f758-4d89-b25d-8cceb72d99f7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"removeScriptInstanceRequest\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.ExecuteCustomAction_{{index}}_Script",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"scriptInstance",
										"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1c462897-2f60-4a97-b25b-0a6cbf237841",
						"type": "text/javascript",
						"exec": [
							"pm.globals.set(\"index\", 461);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2641820e-6452-4a3d-8c57-7b6a65da1e1c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Entity Security",
			"item": [
				{
					"name": "Setup Data",
					"item": [
						{
							"name": "Restore User to default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1e33606-8345-46ff-bcad-1f9a55f26ff4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Seller SELLER_A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ca0e46a-f94f-44c3-8c25-c459ea2d7a05",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32db1807-0dcd-4744-92ad-752c18e2ce27",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
											"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
											"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
											"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Seller SELLER_B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f454717-c83b-4136-973f-78efb7fe0dbe",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5e60dc9-69cf-4d7d-9bd0-f520dc40c18b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
											"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
											"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
											"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Seller SELLER_C",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4dfd7b38-ca9f-4d52-b167-be4ee9468571",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_C\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_C\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Account Hierarchy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "557a1ad4-9d72-4206-8a3d-c61386047ecb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sellers\": {\n        \"seller\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n                \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n                \"currencyCode\": \"EUR\",\n                \"countryCode\": \"FR\",\n                \"languageCode\": \"FRA\",\n                \"parentSeller\": \"MAIN_SELLER\",\n                \"customers\": {\n                    \"customer\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n                            \"externalRef1\": \"1\",\n                            \"externalRef2\": \"1\",\n                            \"name\": {\n                                \"title\": \"MR\",\n                                \"firstName\": \"firstName\",\n                                \"lastName\": \"lastName\"\n                            },\n                            \"address\": {\n                                \"address1\": \"address1\",\n                                \"address2\": \"address2\",\n                                \"address3\": \"address3\",\n                                \"zipCode\": \"75001\",\n                                \"city\": \"Tunis\",\n                                \"country\": \"TN\"\n                            },\n                            \"customerCategory\": \"CLIENT\",\n                            \"customerBrand\": \"DEFAULT\",\n                            \"mandateIdentification\": \"M1\",\n                            \"mandateDate\": \"2016-02-28\",\n                            \"contactInformation\": {\n                                \"email\": \"{{entityPrefix}}@manaty.net\",\n                                \"phone\": \"1234\",\n                                \"mobile\": \"092152154716\",\n                                \"fax\": \"1234\"\n                            },\n                            \"customerAccounts\": {\n                                \"customerAccount\": [\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA1\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA2\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA3\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA2\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA2\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA4\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA4\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA5\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA5\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA6\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA6\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA3\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA3\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA7\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA7\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA8\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA8\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA9\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA9\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAA2\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAA2\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA4\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA4\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA11\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA11\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA12\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA12\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA13\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA13\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA5\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA5\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA14\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA14\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA15\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA15\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA16\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA16\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA6\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA6\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA17\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA17\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA18\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA18\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA19\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA19\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAA3\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAA3\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA7\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA7\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA21\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA21\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA22\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA22\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA23\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA23\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA8\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA8\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA24\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA24\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA25\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA25\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA26\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA26\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA9\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA9\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA27\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA27\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA28\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA28\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA29\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA29\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n                \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n                \"currencyCode\": \"USD\",\n                \"countryCode\": \"US\",\n                \"languageCode\": \"ENG\",\n                \"parentSeller\": \"MAIN_SELLER\",\n                \"customers\": {\n                    \"customer\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n                            \"externalRef1\": \"1\",\n                            \"externalRef2\": \"1\",\n                            \"name\": {\n                                \"title\": \"MR\",\n                                \"firstName\": \"firstName\",\n                                \"lastName\": \"lastName\"\n                            },\n                            \"address\": {\n                                \"address1\": \"address1\",\n                                \"address2\": \"address2\",\n                                \"address3\": \"address3\",\n                                \"zipCode\": \"75001\",\n                                \"city\": \"Tunis\",\n                                \"country\": \"TN\"\n                            },\n                            \"customerCategory\": \"CLIENT\",\n                            \"customerBrand\": \"DEFAULT\",\n                            \"mandateIdentification\": \"M1\",\n                            \"mandateDate\": \"2016-02-28\",\n                            \"contactInformation\": {\n                                \"email\": \"{{entityPrefix}}@manaty.net\",\n                                \"phone\": \"1234\",\n                                \"mobile\": \"092152154716\",\n                                \"fax\": \"1234\"\n                            },\n                            \"customerAccounts\": {\n                                \"customerAccount\": [\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB1\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB2\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB3\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB2\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB2\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB4\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB4\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB5\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB5\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB6\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB6\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB3\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB3\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB7\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB7\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB8\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB8\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB9\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB9\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAB2\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAB2\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB4\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB4\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB11\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB11\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB12\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB12\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB13\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB13\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB5\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB5\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB14\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB14\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB15\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB15\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB16\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB16\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB6\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB6\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB17\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB17\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB18\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB18\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB19\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB19\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAB3\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAB3\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB7\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB7\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB21\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB21\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB22\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB22\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB23\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB23\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB8\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB8\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB24\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB24\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB25\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB25\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB26\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB26\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB9\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB9\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB27\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB27\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB28\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB28\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB29\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB29\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy/customerHierarchyUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy",
										"customerHierarchyUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create UserHierarchyLevels",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fe60912-055e-456f-bc50-ab06f9457ee2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_Description1\",\n    \"orderLevel\": \"1\",\n    \"userHierarchyLevel\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_2\",\n            \"description\": \"{{entityPrefix}}_{{index}}_Description 2\",\n            \"orderLevel\": \"1\",\n            \"userHierarchyLevel\": [\n                {\n                    \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_2_1\",\n                    \"description\": \"{{entityPrefix}}_{{index}}_Description 21\",\n                    \"orderLevel\": \"1\"\n                },\n                {\n                    \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_2_2\",\n                    \"description\": \"{{entityPrefix}}_{{index}}_Description 22\",\n                    \"orderLevel\": \"2\"\n                }\n            ]\n        },\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_3\",\n            \"description\": \"{{entityPrefix}}_{{index}}_Description 3\",\n            \"orderLevel\": \"2\"\n        }\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/hierarchy/userGroupLevel",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"hierarchy",
										"userGroupLevel"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User in level 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc7bd95c-f380-4a4e-9a19-2400f776831e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level1\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 1\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_1\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User in level 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4cc67a3-96b7-4749-8927-767d9bdc0b92",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level2\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 2\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_2\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User in level 2.1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9768eaa-51e0-4fea-9d2d-325aaa90abe4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level21\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 2.1\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_2_1\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User in level 2.2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db7267dc-510d-4c19-836a-55a8264483f8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level22\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 2.2\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_2_2\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User in level 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2784995e-d19f-4b96-845f-5f10ec0f0542",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level3\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n      \"administrateur\"\n    ],\n    \"firstName\": \"Level 3\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_3\"\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create UserRole with userSelfManagement permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba605320-f47e-458e-8c14-1fe34dec6719",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{entityPrefix}}_{{index}}_ROLE_SELF_USER\",\n    \"description\": \"{{entityPrefix}}_{{index}}_ROLE_SELF_USER\",\n    \"permission\": [\n      {\n        \"permission\": \"userSelfManagement\",\n        \"name\": \"User Self Management\"\n      }\n    ]\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/role",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"role"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create offer template - no seller",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94241dab-f2b7-40cc-a6ec-9506546acf9e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_NOSELLER\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create offer template - seller A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14f41463-0c79-4447-9863-37efcba9e60c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_A\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_A\"\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create offer template - seller B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24cf5e26-1992-41d6-bda8-5fd3b4b1cb6b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_B\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_B\"\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create offer template - seller C",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63b3edcd-8023-4ab3-92c7-3f07beff6658",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_C\"\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create offer template - seller A,B,C",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afc3d55f-51ca-4378-a670-aefaf96bbb12",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_D\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_A\",\n        \"{{entityPrefix}}_{{index}}_SELLER_B\",\n        \"{{entityPrefix}}_{{index}}_SELLER_C\"\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set securedEntities=true - AUTHORIZATION_SUPERADMIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d666de72-2525-47c2-abfd-68db340d0f23",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{opencell.superusername}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{opencell.superpassword}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuc3VwZXJhZG1pbjpvcGVuY2VsbC5zdXBlcmFkbWlu"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"properties\": [\n        {\n            \"key\": \"secured.entities.enabled\",\n            \"value\": \"true\"\n        }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/configurations/properties",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"configurations",
										"properties"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Seller Tests",
					"item": [
						{
							"name": "Restore User to default.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2357f0c3-339f-4872-b001-dbe8de2a6c99",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47e8432e-48af-4c51-a7b7-897335d642c0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
											"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
											"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
											"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6092b137-6d3f-45eb-9658-b8f6ae4610df",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
											"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
											"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
											"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to MAIN_SELLER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67115bee-8eab-4bdf-a1f4-cd7c2f01898c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"MAIN_SELLER\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        },\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        },\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_A still accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af080829-3a91-4149-b01d-1ce49fd8bfc6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
											"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
											"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
											"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_B still accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e813e58-c26f-4d18-ab99-ec06cffcc7dd",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
											"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
											"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
											"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_A only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56b1b696-a6d0-47b6-92fc-a4ebbb04f755",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_A still accessible.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ed6e2c6-2a61-402a-8b5e-2505c5c27ca0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
											"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
											"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
											"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_B not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23da561d-218f-4ae0-98bf-5a7fb0010bbd",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller MAIN_SELLER not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f913647d-4a65-4d31-8e7d-a0278ea36a32",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"MAIN_SELLER\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode=MAIN_SELLER",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "MAIN_SELLER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_B only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c78e9880-6461-42e8-8322-3b237ec92869",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_A not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c7783e2-3952-490b-b634-29b5b85b57ce",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_B now accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a280ae2-9aac-4aa5-945e-e3164d055b67",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller MAIN_SELLER still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdb204d5-b271-4575-a918-192bd1e33eef",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sellerCode\": \"MAIN_SELLER\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode=MAIN_SELLER",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "MAIN_SELLER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Restore User to default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d13aa30b-b62f-47f0-9c07-c7274b445c99",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Customer Tests",
					"item": [
						{
							"name": "Restore User to default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73fe2738-79b9-4473-9b8b-cea106232450",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50a222a0-c1a5-43f0-b116-dbae16764198",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTB",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3a7dc59-d1b9-4d03-b082-01bbb0592e86",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to CUSTA only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e80f0b1-4d15-4b82-b136-382a271cceb0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\n        \n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTA still accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac91c01b-7d18-4668-916a-cc2760abb57d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTB not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "614864bd-d8db-4db2-ac2d-7d7df5ee591c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Customer with Filter CUSTA is accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b01c788-63b1-49f1-9465-e4fb063e8669",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(1);",
											"    pm.expect(jsonData.customers.customer[0].code).to.deep.equal(jsonBody.customer[0].code);",
											"    pm.expect(jsonData.customers.customer[0].description).to.deep.equal(jsonBody.customer[0].description);",
											"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[0].code);",
											"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[1].code);",
											"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n            \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n            \"customerAccounts\": {\n                \"customerAccount\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n                    }\n                ]\n            }\n        }\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTA%7Cseller:{{entityPrefix}}_{{index}}_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"list"
									],
									"query": [
										{
											"key": "query",
											"value": "code:{{entityPrefix}}_{{index}}_CUSTA%7Cseller:{{entityPrefix}}_{{index}}_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Customer with Filter CUSTB not accessible.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74dc9eee-19e9-4f43-9f3d-e18cc548104c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": [\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTB%7Cseller:{{entityPrefix}}_{{index}}_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"list"
									],
									"query": [
										{
											"key": "query",
											"value": "code:{{entityPrefix}}_{{index}}_CUSTB%7Cseller:{{entityPrefix}}_{{index}}_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_A not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e74b417-0b19-44b4-8f30-03460fc90b29",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_A\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_B not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a26ca4cf-3a55-4578-a83b-baa9d8250cf2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to CUSTB only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26e3b6ac-443a-41d7-8de5-5650302282bd",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTA not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e493b03a-eb72-476c-8aaa-90e1bf704dfa",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customerCode\": \"{{entityPrefix}}_{{index}}_CUSTA\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTB now accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ea2b7f2-d2d7-4ae6-9242-ebeef3b2b146",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_A still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d8e9a6f-5249-49ca-a240-2a029c8b5633",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_A\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_B still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3134f07-8d29-4ac2-a513-8ba0052efd0e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Customer with Filter CUSTA not accessible.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f4fbe72-aa53-44b4-818f-e20042a7f1f1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": [\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"list"
									],
									"query": [
										{
											"key": "query",
											"value": "code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Customer with Filter CUSTB is accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27118f11-3439-405f-8246-eb539fa44d48",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(1);",
											"    pm.expect(jsonData.customers.customer[0].code).to.deep.equal(jsonBody.customer[0].code);",
											"    pm.expect(jsonData.customers.customer[0].description).to.deep.equal(jsonBody.customer[0].description);",
											"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[0].code);",
											"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[1].code);",
											"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n            \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n            \"customerAccounts\": {\n                \"customerAccount\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n                    }\n                ]\n            }\n        }\n    ]\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTB%7Cseller:{{entityPrefix}}_{{index}}_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"list"
									],
									"query": [
										{
											"key": "query",
											"value": "code:{{entityPrefix}}_{{index}}_CUSTB%7Cseller:{{entityPrefix}}_{{index}}_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Restore User to default.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19f3d93e-9bd7-4feb-bf33-003775c7b57a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Customer Account Tests",
					"item": [
						{
							"name": "Restore User to default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55f13824-a142-4dbd-b0e5-b51dd43323a4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAA1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0bdc6348-c6cd-46f5-a914-a4117bc55fe6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAB1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2ae8ac6-7274-410d-9aaa-4fc0ad316c65",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2094c882-42f9-49da-a444-8eb9e0fb52ee",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTB",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8703df2e-243b-4bf1-b960-9dafc2b05168",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2edd63a4-f4f6-42b2-8fcd-82832016e6f1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
											"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
											"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
											"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "099dba71-84c0-46ff-b98a-669c5bd1f345",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
											"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
											"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
											"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_A only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67ccef7f-e09d-4394-890e-abe15c6e3d85",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAA1 still accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee333b5e-6901-467c-adea-75559095f3a8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAB1 not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0c2691b-68d7-44c7-b930-54b56c8a3c76",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_B only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "002a1247-2ae2-4a00-890b-601f40baec3f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAA1 not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d319637-3e4c-4cae-aa38-e90e704c8fbd",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAB1 now accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69403173-f730-44a5-a158-0310b69977af",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to CUSTA only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28d12a81-011a-41dd-9545-1920cc40e65f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAA1 now accessible again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4688c50f-ccc8-402e-a7d3-04a274123efe",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAB1 not accessible again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6fdb766-e515-42ad-9de7-46ed37af6f52",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAB1\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to CUSTB only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca1f743f-7d55-493a-9edb-a07509058ca3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAA1 not accessible again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84f82abf-440d-430f-8b19-0d4aa3bd74c5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAA1\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAB1 now accessible again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc55c01f-cf01-4577-b16e-6c8cb984cbd6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to CAA1 only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a08d346c-a847-49ca-b302-c3d5d50b1033",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAA1 now accessible again.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15806541-1276-45a0-bece-60e7e9c2fe68",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAB1 not accessible again.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42013909-cab8-41ca-b93d-542e0e42937f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAB1\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTA not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5097520-4ccc-416f-ac0c-25935dedc3a3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customerCode\": \"{{entityPrefix}}_{{index}}_CUSTA\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTB not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0fafca7-db80-438c-8622-0f1bdde99c45",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customerCode\": \"{{entityPrefix}}_{{index}}_CUSTA\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_A not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14686639-2bce-4c8a-a3d6-388564dcd80d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findSeller\": {\n        \"sellerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_SELLER_A\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_B not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cecea4bd-72fa-48ab-b942-cd6407ae94a9",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findSeller\": {\n        \"sellerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_SELLER_B\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to CAB1 only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79837acc-8ec7-40cd-87a1-6a5be825fd5c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAA1 not accessible again.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5d24c12-17e1-4ed0-a8e6-d372d5787266",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAA1\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAB1 now accessible again.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93253547-6308-4edb-afb7-9e2c1e02778b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTA still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d855b42c-b2c1-4b2c-910e-adddcaebc0ff",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomer\": {\n        \"customerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CUSTA\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTB still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a6c2fc0-4b31-4299-9e6e-fbc38ef02b47",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomer\": {\n        \"customerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CUSTB\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_A still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd2f720f-c31f-4ec2-862a-bd8bf27875a2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomer\": {\n        \"customerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CUSTB\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_B still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b75e20d-80bb-41d0-9220-369120be77b4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findSeller\": {\n        \"sellerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_SELLER_B\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to CUSTA and CAA1 only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a4a647a-9785-46d6-bc74-d82dc7963976",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        },\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAA1 now accessible again..",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdb31549-ce2b-45ba-8927-683d740aef3c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTA with all its CustomerAccounts included",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27017d43-b123-4842-8246-e629444ee05f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Restore User to default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e71473b-1e74-455e-9e4a-01af9a4b0d08",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Billing Account Tests",
					"item": [
						{
							"name": "Restore User to default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b565d5f-b095-419d-b9c8-86ba99b8b82a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAA1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84803d44-336d-453f-a4fc-6cf5aeabe60e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAB1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d73f553d-f79a-42f5-bbc0-a786ab4af32f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_A only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cda6a5f5-8323-4f14-8a4f-a47ba2374d9b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAA1 still accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52b05609-a2df-4416-9fc5-c6127adca34f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAB1 not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "108912e7-4044-440b-8487-eb73408c5dc8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_B only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c570b33e-423f-4ba3-b373-8fdf4c88187d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAA1 not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95db1be5-159c-4131-ad64-ad496f9627be",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAB1 now accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0de274a-a0ec-4df3-a20d-e39ba8954742",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to CUSTA only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "faa84960-5669-4a6e-b2ae-42a6be2dc046",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAA1 now accessible again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fae451ca-3db6-496a-ae3a-bfc93e8f5e47",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAB1 not accessible again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "681cf086-dcf8-42f5-9bca-c1ebf846c508",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to CUSTB only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c53eebcf-85dc-45d4-ad10-23ffa24baa4b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAA1 not accessible again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bcb79a35-6d10-4fb0-a392-fd2f6a18d0cd",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAB1 now accessible again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d40f3d5-682c-4584-ae5c-8ec844c399d5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to CAA1 only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ec79da6-1be0-4af8-86da-e549449e169d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAA1 now accessible again.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f81e2705-a4ad-4051-98ff-03c89f2ce1be",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAB1 not accessible again.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ede45725-eca4-4048-b746-75376c3b1fe8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to CAB1 only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8aa293f-0719-4522-b92b-d09d49c1d712",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAA1 not accessible again.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a99dc8f7-e1b5-4414-9401-3143f5688a56",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAB1 now accessible again.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "241d667f-580e-4180-a211-68af7f393715",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to BAA1 only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9648d104-f951-449f-b171-58d0d5ed24a2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAA1 now accessible again..",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06e90197-b454-4bcc-80ad-4e141573fa70",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAB1 not accessible again..",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7637d98-aaf8-467e-9dd1-e10db714915e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAA1 not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9002ccf-5b31-43d1-8516-a271f545ad27",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAB1 not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b08108cf-cfdf-4a94-ac1b-a3306f23e7ac",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTA not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f95f0e78-8e35-4033-8736-5fd088284e15",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTB not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a2b0f6d-2dbd-40f1-98d7-5b6eb213ab63",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_A not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3df6c82a-328d-4358-ad03-de86368467b2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_B not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "999648b8-d82a-44df-b549-932dce8ff80d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to BAB1 only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7803404-d464-4fc7-b502-8fc0adad80d2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAA1 not accessible again..",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05c5616e-02b3-4c83-a7f3-64960c2d0a24",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAB1 now accessible again..",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da71edeb-b121-4498-99c4-f0671f43a132",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAA1 still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4632ceb9-7054-4f8c-8b11-baa5680b6454",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAB1 still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d2222ee-0bda-4345-8264-3d3ffc70c5af",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTA still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10e8f385-334b-4e59-a0eb-fba89e5c1fdc",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTB still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "348e595c-67a8-428c-b8ef-a06f5c74daa5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_A still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db88d312-7937-4c73-863b-0885654f4b46",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_B still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "636a3d84-17ce-4945-884e-36a68efed00d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to CAA1 and BAA1 only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18ef0fb0-7a99-4e1b-83d3-7b476603fc9f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        },\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAA1 with all its BillingAccounts included",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c553231-573b-423a-904a-10a79ef06be8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
											"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Restore User to default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdb656ac-2bc6-44cc-a1ea-6dfcf0978e54",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "User Account Tests",
					"item": [
						{
							"name": "Restore User to default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2fd8354c-fb33-4e8c-983c-90453e4e1e0f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAA1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97020b21-8a63-440e-925b-19a98f2b5f2b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAB1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ce996f3-51b7-4a8c-9841-b47bb6155d68",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_A only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7e06f2c-2f7c-469c-ab4e-5ae3b6d3d86c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAA1 still accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1edbd92-f0b9-4e5b-8400-d7a7cf6a39c6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAB1 not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a11b7295-c84c-47fc-8980-703d3b46933e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_B only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a7a3f39-f53e-4dfe-a375-aaf2a821e587",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAA1 not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86ebefa4-c5b4-449f-b85a-3417175b9881",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAB1 now accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ae6b029-6a3b-4f86-83b7-4f80a03bf7f7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to CUSTA only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6855ce4c-5958-46c7-b9fe-8600c60d61c7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAA1 now accessible again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aef12065-a18f-4055-965c-99ebaa00ad9a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAB1 not accessible again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36ffbbd2-f653-419c-9fe8-08a633fc360a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to CUSTB only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e86c0421-9222-4beb-8894-2e23ee8cc01b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAA1 not accessible again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae9d97b0-0724-40f7-8c11-36b161fccc51",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAB1 now accessible again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "865c6477-f0b8-42f2-8478-c3f34470f5bd",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to CAA1 only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ad04b26-a938-4c63-b0f8-62c426e70278",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAA1 now accessible again.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26b0e6e7-4df3-46ae-ac57-2c68bff0d47a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAB1 not accessible again.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fd8e1b5-203a-4c86-83a0-0b03acde35e1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to CAA1 only Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da8176cc-6ee5-45e9-87a7-2a4a7398aa0b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAA1 not accessible again.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb04a4e3-fe88-4419-9083-fd32fad9b6f6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAB1 now accessible again.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d022fb9-6b63-41b7-bb3a-d06c3f1b4a65",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to BAA1 only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8ab30f8-510b-4a37-abe1-da9776bdcb05",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAA1 now accessible again..",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa3cebfc-9163-4df4-9e2e-fd46647258eb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAB1 not accessible again..",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2505920f-e9a4-4dbb-8f40-fd7b9c2d7134",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to BAB1 only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74351123-66ae-4baa-b7a1-331aa93dd12b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAA1 not accessible again..",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8bb894f1-8b56-4b73-9eb8-72808f117ee2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAB1 now accessible again..",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0c39cc4-d50d-4823-a999-71c195128f9a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to UAA1 only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5492fb7-a0a1-4b73-a885-2fc4a416a3ac",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_UAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.UserAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAA1 now accessible again...",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aabf8623-883d-45b4-918c-a215749ca380",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAB1 not accessible again...",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82b1aaaf-e768-4657-9039-c23277238414",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAA1 not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "634b9969-dc51-4df3-866b-5741118ab79b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAB1 not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59ec5343-763f-4b63-8477-1a4d6984cf01",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAA1 not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462614e6-4185-4f64-be1f-c75676715d99",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAB1 not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73fe3a2e-9cea-41ae-8e5a-f4141b0545e5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTA not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "abf2f12e-10b1-4089-9406-ca7f2801c333",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTB not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf30e31c-8387-4b8f-aca2-72c87b428c28",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_A not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "affc601a-a759-460d-8ad4-89eddf2c83d4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_B not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1b1cf3b-2d32-487d-afc8-26f9d0442171",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to UAB1 only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01917685-b7dc-4221-ae39-d7b86f8acb9e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_UAB1\",\r\n            \"entityClass\": \"org.meveo.model.billing.UserAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAA1 not accessible again...",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90cd72cc-9ccd-4c02-8971-9092cbc6b630",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find User Account UAB1 now accessible again...",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43e7b39a-920c-40ae-add1-b021a74254e9",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{entityPrefix}}_{{index}}_UAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAA1 still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0815628-38c8-4a57-a715-e6f573849a3f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAB1 still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "318036ac-a440-40d7-b936-640fd995cfdb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAA1 still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51a4d95c-03b1-4dd3-a167-a24f31810fee",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer Account CAB1 still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e80c9fc-cdf1-4d73-a187-376780220102",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{entityPrefix}}_{{index}}_CAB1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTA still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74b2568d-7f1a-4ecf-a727-be10c88d1ee1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Customer CUSTB still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b86655f-b64e-4e34-86b7-9f11651ac4bf",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_A still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77a47ffc-0556-4370-a9d8-57ab10483783",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Seller SELLER_B still not accessible",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed42c84e-5424-4882-a818-56c3129ef7b1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to BAA1 and UAA1 only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff444edb-82e2-4809-8f16-7d49b357b9e8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        },\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_UAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.UserAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Billing Account BAA1 with all its UserAccounts included",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3962f2a-05c6-4237-95f4-4da8248ad9bf",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
											"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{entityPrefix}}_{{index}}_BAA1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Restore User to default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "319fa349-753c-4f7d-b888-0c2e7ea4f79e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "AccountHierarchy API Tests",
					"item": [
						{
							"name": "Restore User to default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5320df51-8239-4ead-8a4c-9e539cfa028c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_A only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a50f741-e958-4013-86e1-e035cf7fa623",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CRMAccountHierarchy fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03ce61cb-3cb0-4368-b619-7873d3dae9eb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy\",\r\n    \"externalRef1\": \"Ref1\",\r\n    \"externalRef2\": \"Ref2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"20250\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n        \"phone\": \"+0122674100\",\r\n        \"mobile\": \"+0139154716\"\r\n    },\r\n    \"language\": \"FRA\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"subscriptionDate\": \"2016-02-01\",\r\n    \"terminationDate\": \"2016-05-01\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M1\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"EUR\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"VIP\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R0\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"FR\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy/createCRMAccountHierarchy",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy",
										"createCRMAccountHierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_B only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5b535e5-d951-4fbb-896d-85fa88418a68",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CRMAccountHierarchy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e78bd65-f3ac-4bbc-9916-0622877436b3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy\",\r\n    \"externalRef1\": \"Ref1\",\r\n    \"externalRef2\": \"Ref2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"20250\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n        \"phone\": \"+0122674100\",\r\n        \"mobile\": \"+0139154716\"\r\n    },\r\n    \"language\": \"FRA\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"subscriptionDate\": \"2016-02-01\",\r\n    \"terminationDate\": \"2016-05-01\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M1\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"EUR\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"VIP\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R0\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"FR\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy/createCRMAccountHierarchy",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy",
										"createCRMAccountHierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_A only.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0111ead8-b990-4eec-b3a0-43fa8a07a24f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find CRMAccountHierarchy fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b1685d9-7ce4-48d2-8dc8-aad4297c6947",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_B only.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de980969-3a89-468c-99c9-3bbfbf193091",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find CRMAccountHierarchy.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a54dc08-2c30-4e2d-948c-086e89b46542",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].billingAccounts.billingAccount[0].userAccounts.userAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"customerAccounts\": {\r\n        \"customerAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n                \"billingAccounts\": {\r\n                    \"billingAccount\": [\r\n                        {\r\n                            \"userAccounts\": {\r\n                                \"userAccount\": [\r\n                                    {\r\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\"\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_A only..",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82f87b87-a8e6-46ad-9d35-fe3c61ab200e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update CRMAccountHierarchy fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "883ab7d6-1b4b-43f5-aa67-b7f075193a66",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy-Updated\",\r\n    \"externalRef1\": \"EXTRef1\",\r\n    \"externalRef2\": \"EXTRef2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"01020\",\r\n        \"city\": \"Charguia2\",\r\n        \"country\": \"TN\",\r\n        \"state\": \"Tunisie\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n        \"phone\": \"+0135215579\",\r\n        \"mobile\": \"+0141487410\"\r\n    },\r\n    \"language\": \"ENG\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"subscriptionDate\": \"2016-03-16\",\r\n    \"terminationDate\": \"2016-06-15\",\r\n    \"customerCategory\": \"PROSPECT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M10221\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"USD\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"PART_C\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R1\",\r\n    \"billingCycle\": \"CYC_INV_MT_2\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"US\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy/updateCRMAccountHierarchy",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy",
										"updateCRMAccountHierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_B only..",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2760df4b-65ed-4ebb-bead-6629dabc5a8e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update CRMAccountHierarchy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b5c97d5-0d04-42fa-aa24-affdf8e4f90e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy-Updated\",\r\n    \"externalRef1\": \"EXTRef1\",\r\n    \"externalRef2\": \"EXTRef2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"01020\",\r\n        \"city\": \"Charguia2\",\r\n        \"country\": \"TN\",\r\n        \"state\": \"Tunisie\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n        \"phone\": \"+0135215579\",\r\n        \"mobile\": \"+0141487410\"\r\n    },\r\n    \"language\": \"ENG\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"subscriptionDate\": \"2016-03-16\",\r\n    \"terminationDate\": \"2016-06-15\",\r\n    \"customerCategory\": \"PROSPECT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M10221\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"USD\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"PART_C\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R1\",\r\n    \"billingCycle\": \"CYC_INV_MT_2\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"US\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy/updateCRMAccountHierarchy",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy",
										"updateCRMAccountHierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_A only...",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39eb61c8-db54-4d51-87e0-b2889fbfc4e0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find CRMAccountHierarchy fail.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bc0d7a6-042b-445f-aad0-f0418bbfbfbe",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_B only...",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c684c2b8-f220-45f0-8070-f8dd477b127d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find CRMAccountHierarchy..",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3713b534-2197-43f1-bcc0-4c8e06225f10",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
											"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].billingAccounts.billingAccount[0].userAccounts.userAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"customerAccounts\": {\r\n        \"customerAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n                \"billingAccounts\": {\r\n                    \"billingAccount\": [\r\n                        {\r\n                            \"userAccounts\": {\r\n                                \"userAccount\": [\r\n                                    {\r\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\"\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to CRM-CUST only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d4d4ee5-d468-43f4-8fab-0ae173547a72",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update CRMAccountHierarchy.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1d6655a-1e61-43f9-8ce0-0465ae7f6db4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy-Updated\",\r\n    \"externalRef1\": \"EXTRef1\",\r\n    \"externalRef2\": \"EXTRef2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"01020\",\r\n        \"city\": \"Charguia2\",\r\n        \"country\": \"TN\",\r\n        \"state\": \"Tunisie\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n        \"phone\": \"+0135215579\",\r\n        \"mobile\": \"+0141487410\"\r\n    },\r\n    \"language\": \"ENG\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"subscriptionDate\": \"2016-03-16\",\r\n    \"terminationDate\": \"2016-06-15\",\r\n    \"customerCategory\": \"PROSPECT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M10221\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"USD\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"PART_C\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R1\",\r\n    \"billingCycle\": \"CYC_INV_MT_2\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"US\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy/updateCRMAccountHierarchy",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy",
										"updateCRMAccountHierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Customer CRM_CUST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24dde86e-1d30-4683-9b67-a029cd6f0a18",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy\",\r\n    \"externalRef1\": \"Ref1\",\r\n    \"externalRef2\": \"Ref2\",\r\n    \"name\": {\r\n        \"title\": \"M\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"20250\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_18@yahoo.fr\",\r\n        \"phone\": \"+0122674100\",\r\n        \"mobile\": \"+0139154716\"\r\n    },\r\n    \"language\": \"FRA\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"subscriptionDate\": \"2016-02-01\",\r\n    \"terminationDate\": \"2016-05-01\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M1\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"EUR\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"VIP\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R0\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"FR\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_18@yahoo.fr\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CRM-CUST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"{{entityPrefix}}_{{index}}_CRM-CUST"
									]
								}
							},
							"response": []
						},
						{
							"name": "Restore User to default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8fd8347-3001-4839-a494-89f610fd1567",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Offer templates",
					"item": [
						{
							"name": "Restore User to default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8239c087-234d-4706-86ca-8f43baf53106",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "List offerTemplates - show all",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa40188a-ba35-4b04-b681-c941e0bbbd8b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Body contains offer templates\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
											"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
											"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
											"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "500"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_A only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32280c06-64aa-472c-afdb-48169db8117a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "List offerTemplates - show A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae1bcad0-d8cf-4bb9-9cc1-df7c91050210",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Body contains offer templates\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
											"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
											"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
											"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "500"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find offerTemplate - no seller",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e5f4992-ae39-4809-94f8-d427d040d8c0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_NOSELLER\",\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_NOSELLER\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_NOSELLER",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									],
									"query": [
										{
											"key": "offerTemplateCode",
											"value": "{{entityPrefix}}_{{index}}_OFFER_NOSELLER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find offerTemplate - A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a226da69-02c3-4bed-9830-46452b8eb6d0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_A\",\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_A\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									],
									"query": [
										{
											"key": "offerTemplateCode",
											"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find offerTemplate - B fails",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb3a6de4-aaf8-489a-956d-29bc82cc7f35",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									],
									"query": [
										{
											"key": "offerTemplateCode",
											"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_B only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c46ee67-c21a-435d-bc81-d718459c8332",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "List offerTemplates - show B and C",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "098ecae1-b540-42d0-bc58-bc3a262d4e75",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Body contains offer templates\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
											"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
											"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
											"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "500"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find offerTemplate - B 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b8f381f-2058-491d-97ad-d5102d621007",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_B\",\r\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_B\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									],
									"query": [
										{
											"key": "offerTemplateCode",
											"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find offerTemplate - C",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed721dad-3add-406a-b6fa-d7825b80ce57",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\",\r\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_C",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									],
									"query": [
										{
											"key": "offerTemplateCode",
											"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_C"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find offerTemplate - A  fails",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48ec1097-7123-4a15-ac85-0bc8dda39223",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									],
									"query": [
										{
											"key": "offerTemplateCode",
											"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User to Allow Access to SELLER_C only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "645211ac-4dc7-4a2a-9dcd-84ec0ca0a7f6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_C\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "List offerTemplates - show C",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "476ddbb5-c904-4860-aa4e-10b103c7769b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Body contains offer templates\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
											"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
											"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
											"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "500"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find offerTemplate - C 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27f292a1-200b-4baf-846e-6af5ae503fd0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\",\r\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_C",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									],
									"query": [
										{
											"key": "offerTemplateCode",
											"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_C"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find offerTemplate - A  fails 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7cc9b753-26a8-4518-bf1b-d89866931223",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									],
									"query": [
										{
											"key": "offerTemplateCode",
											"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find offerTemplate - B fails 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57dd6d5c-09a9-4283-8efb-d16f521ac3dc",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									],
									"query": [
										{
											"key": "offerTemplateCode",
											"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Restore User to default.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03e3b5c9-1f24-4a78-8059-03e6e4145842",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "List offerTemplates by filter - show only C and A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a0a2c78-f44b-45d0-856d-5d8ebb74392a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Body contains offer templates\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.paging.totalNumberOfRecords).to.eql(3);",
											"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
											"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
											"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
											"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
											"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_D\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filters\": {\r\n        \"inList sellers\": \"{{entityPrefix}}_{{index}}_SELLER_A,{{entityPrefix}}_{{index}}_SELLER_C\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/list",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "List offerTemplates by filter - do not show C and A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a52ed1a-a5cf-4368-b31d-53dd0c09fbfd",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Body contains offer templates\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.paging.totalNumberOfRecords).to.eql(2);",
											"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
											"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
											"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
											"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
											"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_D\\\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filters\": {\n        \"not-inList sellers\": \"{{entityPrefix}}_{{index}}_SELLER_A,{{entityPrefix}}_{{index}}_SELLER_C\",\n        \"like code\": \"{{entityPrefix}}_{{index}}_*\"\n    }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/list",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"list"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Cleanup Data",
					"item": [
						{
							"name": "Set securedEntities=false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e3e229e-3521-4657-8830-115d5435fbf0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{opencell.superusername}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{opencell.superpassword}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n{\n    \"properties\": [\n        {\n            \"key\": \"secured.entities.enabled\",\n            \"value\": \"false\"\n        }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/configurations/properties",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"configurations",
										"properties"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Customer CUSTA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68a55bc5-8ba0-4852-8ace-7277b370f980",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CUSTA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"{{entityPrefix}}_{{index}}_CUSTA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Deleted Customer CUSTA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "591c8723-dd23-4875-8ec9-a7a469f73d7a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Customer with code=\" + pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUSTA does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Customer CUSTB",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddfa4cff-0d69-4b6e-9108-dbf72a687cee",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CUSTB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"{{entityPrefix}}_{{index}}_CUSTB"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find Deleted Customer CUSTB",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6bebc33-f40d-4ba9-90de-d0f2ab5efaf2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Customer with code=\" + pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUSTB does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{entityPrefix}}_{{index}}_CUSTB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove offerTemplate - no seller",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33a91073-25a5-4260-9500-4a3efe01f782",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_NOSELLER",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"{{entityPrefix}}_{{index}}_OFFER_NOSELLER"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove offerTemplate - A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e6dc8e8-68db-4407-aa86-56917f13f4b9",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove offerTemplate - B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "117ffbb1-36d5-4d59-aa33-fd65ad77daaf",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove offerTemplate - C",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "427d08cd-9522-4de5-ae26-d9319367962e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_C",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"{{entityPrefix}}_{{index}}_OFFER_SELLER_C"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove offerTemplate - D",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4015389f-23ab-41b0-bca5-2482d0437583",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_D",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"{{entityPrefix}}_{{index}}_OFFER_SELLER_D"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Seller SELLER_A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a37b9537-d66f-4f24-9621-7952936bf43b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller/{{entityPrefix}}_{{index}}_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller",
										"{{entityPrefix}}_{{index}}_SELLER_A"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find deleted Seller SELLER_A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45256173-7684-4e9f-a645-3d0582a37ab7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Seller with code=\" + pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SELLER_A does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_A"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Seller SELLER_C",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f6f0b01-1552-4f59-9686-c1f9ac8a5269",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller/{{entityPrefix}}_{{index}}_SELLER_C",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller",
										"{{entityPrefix}}_{{index}}_SELLER_C"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Seller SELLER_B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "116f2c10-475b-4815-8249-f939367cbd51",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller/{{entityPrefix}}_{{index}}_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller",
										"{{entityPrefix}}_{{index}}_SELLER_B"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find deleted Seller SELLER_B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d208df7-6f2c-4f84-be70-7752ded06c6c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Seller with code=\" + pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SELLER_B does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find deleted Seller SELLER_C",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ccfe2b63-9bda-4b39-afaf-967eb978c0da",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Seller with code=\" + pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SELLER_C does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_C",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{entityPrefix}}_{{index}}_SELLER_C"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Restore User to default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e869955c-881b-478a-9453-ba7119de69d1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User level 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "749902d6-9cb2-4b94-bfea-33e78378a315",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level1\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user",
										"{{entityPrefix}}_{{index}}_Username.Level1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User level 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7351c858-e709-4f34-a535-bcc83369a512",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level2\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level2",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user",
										"{{entityPrefix}}_{{index}}_Username.Level2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User level 2.1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "164c6b22-f012-4a24-add1-21c4edce7cec",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql()",
											"    ;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level21\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level21",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user",
										"{{entityPrefix}}_{{index}}_Username.Level21"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User level 2.2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4a8f465-e85d-4892-85ad-f388de20dc70",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level22\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level22",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user",
										"{{entityPrefix}}_{{index}}_Username.Level22"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User level 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52b0ac15-6971-411a-a830-38f7b1d4d242",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level3\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level3",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"user",
										"{{entityPrefix}}_{{index}}_Username.Level3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove UserHierarchyLevel 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95b8c5fd-7484-4fc5-8c48-8e524b0e69b3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"hierarchyLevelCode\": \"{{entityPrefix}}_{{index}}_LEVEL_1\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/hierarchy/userGroupLevel/{{entityPrefix}}_{{index}}_LEVEL_1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"hierarchy",
										"userGroupLevel",
										"{{entityPrefix}}_{{index}}_LEVEL_1"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "652e9692-c38c-4226-87e2-639c2f639b0c",
						"type": "text/javascript",
						"exec": [
							"pm.globals.set(\"index\", 34);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "aed2c528-a7f2-4ad3-8296-a09e7c21fce7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Workflow executions",
			"item": [
				{
					"name": "Test data",
					"item": [
						{
							"name": "Create customer account for WF",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18722a0d-bd97-42de-905b-de90cf24545f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_WF_CA\",\r\n    \"description\": \"testWF_CA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}@manaty.net\",\r\n        \"phone\": \"00123456789\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"mandateIdentification\": \"1234569548\",\r\n    \"mandateDate\": \"2016-03-10\",\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"status\": \"ACTIVE\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ScriptInstance for Action",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05045bdb-1a4a-441d-a58a-e543f2ccb6e6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"org.meveo.service.script.TheAction\",\r\n    \"description\": \"The Action Script\",\r\n    \"type\": \"JAVA\",\r\n    \"script\": \"package org.meveo.service.script;\\nimport java.util.Map;\\nimport java.math.BigDecimal;\\nimport org.meveo.admin.exception.BusinessException;\\nimport org.meveo.model.admin.User;\\nimport org.meveo.model.crm.Provider;\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\npublic class TheAction extends Script {  \\n  private static final Logger log = LoggerFactory.getLogger(TheAction.class);\\npublic void execute(Map<String,Object> context) throws BusinessException{\\nlog.debug(\\\"\\\\nTheAction Execution\\\\n\\\");\\ncontext.put(Script.RESULT_VALUE, \\\"A string response\\\");\\n}\\n}\",\r\n    \"executionRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ],\r\n    \"sourcingRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"scriptInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Dunning WFType Script",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fcf2549e-560d-45a3-8e06-35c746222694",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"org.meveo.service.script.DunningWFTypeScript\",\r\n    \"description\": \"DunningWFTypeScript\",\r\n    \"type\": \"JAVA\",\r\n    \"script\": \"package org.meveo.service.script;\\n\\nimport java.util.ArrayList;\\nimport java.util.Date;\\nimport java.util.List;\\n\\nimport org.meveo.model.admin.User;\\nimport org.meveo.model.payments.CustomerAccount;\\nimport org.meveo.model.payments.DunningLevelEnum;\\nimport org.meveo.service.script.wf.WFTypeScript;\\n\\n\\npublic class DunningWFTypeScript extends WFTypeScript<CustomerAccount>{\\n\\n  public DunningWFTypeScript() {    \\n  }\\n  \\n  public DunningWFTypeScript(CustomerAccount e) {\\n    super(e);\\n  }\\n  @Override\\n  public List<String> getStatusList() {    \\n    List<String> values = new ArrayList<String>();\\n    for (DunningLevelEnum dunningLevelEnum : DunningLevelEnum.values()) {\\n      values.add(dunningLevelEnum.name());\\n    }\\n    return values;\\n  }\\n\\n  @Override\\n  public void changeStatus(String newStatus) {\\n    entity.setDunningLevel(DunningLevelEnum.valueOf(newStatus));\\n    entity.setDateDunningLevel(new Date());\\n  }\\n\\n  @Override\\n  public String getActualStatus() {    \\n    return entity.getDunningLevel().name();\\n  }\\n}\",\r\n    \"executionRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ],\r\n    \"sourcingRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"scriptInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Workflow with natif WFType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5895e279-f6b5-4360-b2b3-a93dd0fdaac1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_DunningWorkflow\",\r\n    \"description\": \"Dunning workflow from class\",\r\n    \"enableHistory\": \"true\",\r\n    \"targetEntityClass\": \"org.meveo.admin.wf.types.DunningWF\",\r\n    \"initStatus\": \"R0\",\r\n    \"status\": [\r\n        {\r\n            \"code\": \"R0\"\r\n        }\r\n    ],\r\n    \"transition\": [\r\n        {\r\n            \"fromStatus\": \"R0\",\r\n            \"toStatus\": \"R1\",\r\n            \"conditionEl\": \"#{true}\",\r\n            \"description\": \"DESCRIPTION to R1\",\r\n            \"actionScriptCode\": \"#{mv:executeScript(entity,\\\"org.meveo.service.script.TheAction\\\",null)}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/admin/genericWorkflow/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"genericWorkflow",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Workflow with runTime WFType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4035565f-2f4a-4e96-9f04-49c469cd9711",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_DunningRunTimeWF\",\r\n    \"description\": \"Dunning workflow from script\",\r\n    \"enableHistory\": \"true\",\r\n    \"targetEntityClass\": \"org.meveo.service.script.DunningWFTypeScript\",\r\n    \"initStatus\": \"R0\",\r\n    \"status\": [\r\n        {\r\n            \"code\": \"R0\"\r\n        }\r\n    ],\r\n    \"transition\": [\r\n        {\r\n            \"fromStatus\": \"R1\",\r\n            \"toStatus\": \"R2\",\r\n            \"conditionEl\": \"#{true}\",\r\n            \"description\": \"DESCRIPTION to R2\",\r\n            \"actionScriptCode\": \"#{mv:executeScript(entity,\\\"org.meveo.service.script.TheAction\\\",null)}\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/admin/genericWorkflow/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"genericWorkflow",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "find & execute",
					"item": [
						{
							"name": "find workflow by entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6befea89-4412-439f-a79f-d17ccaaad60c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/admin/genericWorkflow/findByEntity?baseEntityName=org.meveo.model.payments.CustomerAccount",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"genericWorkflow",
										"findByEntity"
									],
									"query": [
										{
											"key": "baseEntityName",
											"value": "org.meveo.model.payments.CustomerAccount"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Execute WF - NatitType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82ca4a76-f7f8-4398-8257-50e31f7b550e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/admin/genericWorkflow/execute?baseEntityName=org.meveo.model.payments.CustomerAccount&entityInstanceCode={{entityPrefix}}_{{index}}_WF_CA&workflowCode={{baseEntityPrefix}}_DunningWorkflow",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"genericWorkflow",
										"execute"
									],
									"query": [
										{
											"key": "baseEntityName",
											"value": "org.meveo.model.payments.CustomerAccount"
										},
										{
											"key": "entityInstanceCode",
											"value": "{{entityPrefix}}_{{index}}_WF_CA"
										},
										{
											"key": "workflowCode",
											"value": "{{baseEntityPrefix}}_DunningWorkflow"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Execute WF - scriptType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c1c9333-051b-4660-ae64-69c251e5e159",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/admin/genericWorkflow/execute?baseEntityName=org.meveo.model.payments.CustomerAccount&entityInstanceCode={{entityPrefix}}_{{index}}_WF_CA&workflowCode={{baseEntityPrefix}}_DunningRunTimeWF",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"genericWorkflow",
										"execute"
									],
									"query": [
										{
											"key": "baseEntityName",
											"value": "org.meveo.model.payments.CustomerAccount"
										},
										{
											"key": "entityInstanceCode",
											"value": "{{entityPrefix}}_{{index}}_WF_CA"
										},
										{
											"key": "workflowCode",
											"value": "{{baseEntityPrefix}}_DunningRunTimeWF"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "wf history",
					"item": [
						{
							"name": "findHistory-no criteria",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de1e1b47-4c2b-4828-9512-cb690bd82390",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/admin/genericWorkflow/history",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"genericWorkflow",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "findHistory-with criteria",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "281461d4-0267-4604-81a3-dcf4a66edc48",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"entityInstanceCode\": \"{{entityPrefix}}_{{index}}_WF_CA\",\r\n    \"fromStatus\": \"R1\",\r\n    \"toStatus\": \"R2\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/admin/genericWorkflow/history?entityInstanceCode=RS_FULL_{{index}}_WF_CA&fromStatus=R1&toStatus=R2",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"genericWorkflow",
										"history"
									],
									"query": [
										{
											"key": "entityInstanceCode",
											"value": "RS_FULL_{{index}}_WF_CA"
										},
										{
											"key": "fromStatus",
											"value": "R1"
										},
										{
											"key": "toStatus",
											"value": "R2"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "62e1f995-8f95-451b-94ea-cb1cfd29ae77",
						"type": "text/javascript",
						"exec": [
							"pm.globals.set(\"index\", 453);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6fa1ebdd-a11b-46a4-9afa-d40fffd49efb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Filter search and invoicing",
			"item": [
				{
					"name": "Data model",
					"item": [
						{
							"name": "Create subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad9c77ae-a055-4b65-81df-937c779d0d86",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_CHARGE\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"subscriptionDate\": \"2016-02-01\",\n    \"endAgreementDate\": \"2017-02-01\"\n  }\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate services",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6baf0393-2b96-4614-bbee-6a093e5f555e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_CHARGE\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2016-02-01\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create RatedTransactions Filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d1495f6-63fe-47bd-badb-61581f148edd",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterRT\",\n    \"description\": \"Rated transactions for invoicing test\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n    <primarySelector>\\n    <targetEntity>org.meveo.model.billing.RatedTransaction</targetEntity>\\n    <alias>r</alias>\\n    <displayFields>\\n      <field>code</field>\\n      <field>description</field>\\n      <field>usageDate</field>\\n    </displayFields>\\n    <exportFields/>\\n    <ignoreIfNotFoundForeignKeys/>\\n  </primarySelector>\\n  <secondarySelectors/>\\n  <disabled>false</disabled>\\n  <appendGeneratedCode>false</appendGeneratedCode>\\n  <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n    <filterConditionType>COMPOSITE_AND</filterConditionType>\\n    <filterConditions>\\n        <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n            <filterConditionType>COMPOSITE_AND</filterConditionType>\\n            <filterConditions>\\n                  <primitiveFilterCondition>\\n                    <filterConditionType>PRIMITIVE</filterConditionType>\\n                    <fieldName>usageDate</fieldName>\\n                    <operator><![CDATA[<=]]></operator>\\n                    <operand>date:01/05/2016</operand>\\n                  </primitiveFilterCondition>\\n            </filterConditions>\\n        </filterCondition>\\n        <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n            <filterConditionType>COMPOSITE_AND</filterConditionType>\\n            <filterConditions>\\n                <primitiveFilterCondition>\\n                    <filterConditionType>PRIMITIVE</filterConditionType>\\n                    <fieldName>code</fieldName>\\n                    <operator>=</operator>\\n                    <operand>{{baseEntityPrefix}}_REC1</operand>\\n                  </primitiveFilterCondition>\\n            </filterConditions>\\n        </filterCondition>\\n    </filterConditions>\\n  </filterCondition>\\n</filter>\"\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filter/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filter",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rated Transaction Job",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a69aded3-1ee2-44b7-a4a1-188e9dda99dc",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"RT_Job\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/job/execute",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"execute"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Search",
					"item": [
						{
							"name": "Search from filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a2761c1-996c-4b94-972f-6a1b1b33abd3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Body matches string\", function () {",
											"    pm.expect(pm.response.text()).not.to.include(\"<code>\"+pm.collectionVariables.get(\"baseEntityPrefix\")+\"_OS1</code>\");",
											"    pm.expect(pm.response.text()).to.include(\"<code>\"+pm.collectionVariables.get(\"baseEntityPrefix\")+\"_REC1</code>\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterRT\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"filteredList",
										"listByFilter"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "100"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "87f1a38b-f063-41cb-9d34-4a86dcdb7543",
						"type": "text/javascript",
						"exec": [
							"pm.globals.set(\"index\", 456);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7dde1474-d59f-4ce3-9be4-17542ddf6a94",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Inbound Request Tests",
			"item": [
				{
					"name": "Inbound 1",
					"item": [
						{
							"name": "Create ScriptInstance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f22a6642-bb17-4957-8f3a-b8d761cd6fd0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"org.meveo.service.script.inbound.InboundServletScript\",\n    \"description\": \"InboundServletScript\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script.inbound;\\n\\nimport java.math.BigDecimal;\\nimport java.util.Map;\\nimport org.meveo.admin.exception.BusinessException;\\nimport org.meveo.model.admin.User;\\nimport org.meveo.model.billing.WalletOperation;\\nimport org.meveo.service.script.Script;\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\nimport org.meveo.model.notification.InboundRequest;\\n\\npublic class InboundServletScript extends Script {\\n\\n    private static final Logger log = LoggerFactory.getLogger(InboundServletScript.class);\\n\\n    public void execute(Map<String, Object> context) throws BusinessException {\\n        log.debug(\\\"InboundServlet script...\\\");\\n      \\n        InboundRequest inboundRequest = (InboundRequest) context.get(\\\"event\\\");\\n        inboundRequest.getHeaders().put(\\\"INBOUND_SCRIPT_VAR\\\", \\\"InboundServletScript\\\");\\n\\n    inboundRequest.setResponseBody(\\\"API test\\\");\\n\\n        if (inboundRequest.getParameters()!=null && inboundRequest.getParameters().get(\\\"returnStatus\\\")!=null){\\n            inboundRequest.setResponseStatus(Integer.parseInt(inboundRequest.getParameters().get(\\\"returnStatus\\\")));\\n        }\\n    }\\n}\",\n    \"executionRoles\": [\n        {\n            \"name\": \"administrateur\"\n        }\n    ],\n    \"sourcingRoles\": [\n        {\n            \"name\": \"administrateur\"\n        }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"scriptInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Notifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27f1ecfc-414b-4c79-9a09-3ad7b6282d08",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"INBOUND_SERVLET_NOTIF\",\n    \"classNameFilter\": \"org.meveo.model.notification.InboundRequest\",\n    \"eventTypeFilter\": \"INBOUND_REQ\",\n    \"scriptInstanceCode\": \"org.meveo.service.script.inbound.InboundServletScript\",\n    \"elFilter\": \"#{event.parameters!=null and !event.parameters.containsKey('doNotFire')}\",\n    \"scriptParams\": {\n        \"event\": \"#{event}\"\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/notification/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"notification",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fired=true",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6713d224-a453-4f25-9f03-fb1bf43d6421",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Fired - change return status to 230",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1453551-14ee-4b51-905e-752332e6004d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Fired=false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4d47313-a55e-42d2-bf8f-26aa1f1c2041",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "List notification history",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99792af2-9a78-481b-9fca-233f3c406ba2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"/*",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.notification).to.deep.equal(jsonBody.notification);",
											"    pm.expect(jsonData.entityClassName).to.deep.equal(jsonBody.entityClassName);",
											"    pm.expect(jsonData.nbRetry).to.deep.equal(jsonBody.nbRetry);",
											"}); */"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"notification\": \"INBOUND_SERVLET_NOTIF\",\n    \"entityClassName\": \"org.meveo.model.notification.InboundRequest\",\n    \"nbRetry\": \"0\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/notification/listNotificationHistory",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"notification",
										"listNotificationHistory"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "What is this for and what API is it using?",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bd77f1ef-86c2-46df-b936-d6df6665a837",
						"type": "text/javascript",
						"exec": [
							"pm.globals.set(\"index\", 377);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "034e1472-505a-43a9-a3a7-2fc19dd7b693",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Jobs",
			"item": [
				{
					"name": "Job Reporting",
					"item": [
						{
							"name": "Execute 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b28ed959-4b6c-467a-8956-ec863094caef",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
											"});",
											"",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"job_id\", jsonData.actionStatus.message);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"M_Job\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/job/execute",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Execute 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "358b1a82-376b-483b-bfb3-f683a565d63a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"M_Job\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/job/execute",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find by code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9fa508f-31eb-40c4-b484-860cdb352642",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.jobExecutionResultDto.jobInstanceCode).to.deep.equal(jsonBody.jobInstanceCode);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"jobInstanceCode\": \"M_Job\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/job/jobReport?code=M_Job",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"jobReport"
									],
									"query": [
										{
											"key": "code",
											"value": "M_Job"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83a7849c-e107-4d5c-9b20-2314c192a267",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.jobExecutionResultDto.jobInstanceCode).to.deep.equal(jsonBody.jobInstanceCode);",
											"    pm.expect(jsonData.jobExecutionResultDto.id).to.deep.equal(jsonBody.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": {{job_id}},\n\t\"jobInstanceCode\": \"M_Job\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/job/jobReport?id={{job_id}}",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"jobReport"
									],
									"query": [
										{
											"key": "id",
											"value": "{{job_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Reporting",
			"item": [
				{
					"name": "ReportExtract",
					"item": [
						{
							"name": "Create ScriptInstance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18abe90d-f969-4506-9ba4-dfef3638b22f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"org.meveo.service.script.finance.{{entityPrefix}}_{{index}}_RE_SCRIPT_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_SCRIPT_1\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script.finance;\\n\\nimport java.io.File;\\nimport java.io.FileWriter;\\nimport java.text.DateFormat;\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\nimport java.util.Map;\\n\\nimport org.meveo.admin.exception.BusinessException;\\nimport org.meveo.model.payments.AccountOperation;\\nimport org.meveo.model.payments.CustomerAccount;\\nimport org.meveo.model.payments.RecordedInvoice;\\nimport org.meveo.service.payments.impl.AccountOperationService;\\nimport org.meveo.service.script.Script;\\nimport org.meveo.service.script.finance.ReportExtractScript;\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\nimport java.util.Date;\\n\\npublic class {{entityPrefix}}_{{index}}_RE_SCRIPT_1 extends ReportExtractScript {\\n\\n    private static final Logger LOGGER = LoggerFactory.getLogger({{entityPrefix}}_{{index}}_RE_SCRIPT_1.class);\\n\\n    private AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(AccountOperationService.class.getSimpleName());\\n\\n\\n    @Override\\n    public void execute(Map<String, Object> initContext) throws BusinessException {\\n        try {\\n            LOGGER.debug(\\\"#####################Starting of script {{entityPrefix}}_{{index}}_RE_SCRIPT_1\\\");\\n    \\n            // Get transaction start and end date\\n            Date startDate = (Date) initContext.get(ReportExtractScript.START_DATE);    \\n            Date endDate = (Date) initContext.get(ReportExtractScript.END_DATE);\\n            DateFormat df = new SimpleDateFormat(\\\"yyyy-MM-dd\\\");\\n             \\n            List<AccountOperation> accountOperations = accountOperationService.list();\\n            //create export file\\n            String exportDir = String.valueOf(initContext.get(ReportExtractScript.DIR));\\n            File dir = new File(exportDir);\\n            if (!dir.exists()) {\\n                dir.mkdirs();\\n            }\\n            CustomerAccount customerAccount = null;\\n            StringBuilder sb =new StringBuilder();\\n            sb.append(\\\"Transaction Date;Transaction Type;Amount;Due Date;Reference;Transaction Category;Invoice Date;\\\"\\n                    + \\\"Customer Account Code;Customer Account Description\\\\n\\\");\\n            for (AccountOperation accountOperation : accountOperations) { \\n                if(accountOperation.getTransactionDate().equals(startDate) || accountOperation.getTransactionDate().equals(endDate)\\n                        || (accountOperation.getTransactionDate().after(startDate) && accountOperation.getTransactionDate().before(endDate))) {\\n                    \\n                    customerAccount = accountOperation.getCustomerAccount();\\n                    sb.append(nil(accountOperation.getTransactionDate().toString())+ \\\";\\\");\\n                    sb.append(nil(accountOperation.getType()) + \\\";\\\");\\n                    sb.append(nil(accountOperation.getAmount().toString()) + \\\";\\\");\\n                    sb.append(isNull(accountOperation.getDueDate()) + \\\";\\\");\\n                    sb.append(nil(accountOperation.getReference()) + \\\";\\\");\\n                    sb.append(nil(accountOperation.getTransactionCategory().toString()) + \\\";\\\");\\n                    if(accountOperation instanceof RecordedInvoice) {\\n                        RecordedInvoice invoice = (RecordedInvoice) accountOperation;\\n                        sb.append(invoice.getInvoiceDate().toString() + \\\";\\\");\\n                    } else {\\n                        sb.append(\\\";\\\");\\n                    }\\n                    sb.append(nil(customerAccount.getCode()) + \\\";\\\");\\n                    sb.append(nil(customerAccount.getDescriptionOrCode()) + \\\";\\\\n\\\");\\n\\n                    \\n                }\\n            }\\n              String strFilename = String.valueOf(initContext.get({{entityPrefix}}_{{index}}_RE_SCRIPT_1.FILENAME));\\n              LOGGER.debug(\\\"output={}\\\", strFilename);\\n            File file = new File(dir + File.separator + strFilename);\\n            file.createNewFile();\\n            FileWriter fileWriter = new FileWriter(file);\\n            fileWriter.write(sb.toString());\\n            fileWriter.close();\\n            \\n            LOGGER.debug(\\\"#####################Ending of script {{entityPrefix}}_{{index}}_RE_SCRIPT_1\\\");\\n        } catch (Exception e) {\\n            LOGGER.error(\\\"Exception:\\\", e);\\n            throw new BusinessException(e.getMessage());\\n        }\\n        \\n    }\\n  \\n  private String isNull(Object obj) {\\n    if(obj == null) {\\n      return \\\"\\\";\\n    } else {\\n      return obj.toString();\\n    }\\n  }\\n  \\n    private String nil(String word) {\\n        if (word == null || \\\"null\\\".equalsIgnoreCase(word)) {\\n            return \\\"\\\";\\n        } else {\\n            return word;\\n        }\\n    }\\n}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"scriptInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate - SQL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "701ed3ab-927d-4186-b82e-4a7c616fa32b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"scriptType\": \"SQL\",\n    \"filenameFormat\": \"#{re.category}_accounts-[yyyy_MM_dd].csv\",\n    \"outputDir\": \"reports/accounts\",\n    \"category\": \"accounts\",\n    \"sqlQuery\": \"select code, description from account_entity where :START_DATE<>:END_DATE\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/finance/reportExtracts/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"finance",
										"reportExtracts",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate - JAVA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0c29c79-fe7a-481c-b485-d7cd2fdd39c3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"scriptType\": \"JAVA\",\n    \"filenameFormat\": \"accounts-ops-[yyyy_MM_dd].csv\",\n    \"outputDir\": \"reports/accounts\",\n    \"category\": \"accounts\",\n    \"scriptInstanceCode\": \"org.meveo.service.script.finance.{{entityPrefix}}_{{index}}_RE_SCRIPT_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/finance/reportExtracts/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"finance",
										"reportExtracts",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Run - SQL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f675ee3-46ca-4a18-b439-dbba92619f13",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/finance/reportExtracts/run",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"finance",
										"reportExtracts",
										"run"
									]
								}
							},
							"response": []
						},
						{
							"name": "Run - JAVA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48fd446c-be45-41cc-bff3-2fa9824c770b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/finance/reportExtracts/run",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"finance",
										"reportExtracts",
										"run"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find - SQL 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5093dd26-0eca-4087-997d-76e1bf3b8e9c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.reportExtract.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.reportExtract.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.reportExtract.params).to.deep.equal(jsonBody.params);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/finance/reportExtracts?reportExtractCode={{entityPrefix}}_{{index}}_RE_SQL_1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"finance",
										"reportExtracts"
									],
									"query": [
										{
											"key": "reportExtractCode",
											"value": "{{entityPrefix}}_{{index}}_RE_SQL_1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find - JAVA 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66fcf6dc-2bf1-4b8d-908c-0a4a147b44a6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    var jsonBody = JSON.parse(pm.request.body);",
											"",
											"    pm.expect(jsonData.reportExtract.code).to.deep.equal(jsonBody.code);",
											"    pm.expect(jsonData.reportExtract.description).to.deep.equal(jsonBody.description);",
											"    pm.expect(jsonData.reportExtract.params).to.deep.equal(jsonBody.params);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/finance/reportExtracts?reportExtractCode={{entityPrefix}}_{{index}}_RE_JAVA_1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"finance",
										"reportExtracts"
									],
									"query": [
										{
											"key": "reportExtractCode",
											"value": "{{entityPrefix}}_{{index}}_RE_JAVA_1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove - SQL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe51dc71-41d1-44af-91c2-fa4f2e501572",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{entityPrefix}}_{{index}}_RE_SQL_1",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/finance/reportExtracts",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"finance",
										"reportExtracts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove - JAVA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68a061cc-a170-4ca7-a898-10421dccd5a4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{entityPrefix}}_{{index}}_RE_JAVA_1",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/finance/reportExtracts",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"finance",
										"reportExtracts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find - SQL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "495d9cfd-3690-4783-93f9-3381ce828055",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"ReportExtract with code=\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_RE_SQL_1 does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/finance/reportExtracts?reportExtractCode={{entityPrefix}}_{{index}}_RE_SQL_1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"finance",
										"reportExtracts"
									],
									"query": [
										{
											"key": "reportExtractCode",
											"value": "{{entityPrefix}}_{{index}}_RE_SQL_1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find - JAVA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5410072-fe20-4a84-9068-f74fd5368c82",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"ReportExtract with code=\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_RE_JAVA_1 does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/finance/reportExtracts?reportExtractCode={{entityPrefix}}_{{index}}_RE_JAVA_1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"finance",
										"reportExtracts"
									],
									"query": [
										{
											"key": "reportExtractCode",
											"value": "{{entityPrefix}}_{{index}}_RE_JAVA_1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Job",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46587b41-6da5-4d20-b979-df3818184be9",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"RE_Job\",\n    \"jobTemplate\": \"ReportExtractJob\",\n    \"timerCode\": \"Monthly\",\n    \"jobCategory\": \"DWH\",\n    \"limitToSingleNode\": \"true\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/jobInstance/create",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"jobInstance",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Execute Job",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca8d5f7b-1621-4955-93a7-65160e3cac6a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"RE_Job\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/job/execute",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete script",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d0efe45-590e-459a-831a-d85b6cf30116",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.finance.{{entityPrefix}}_{{index}}_RE_SCRIPT_1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"scriptInstance",
										"org.meveo.service.script.finance.{{entityPrefix}}_{{index}}_RE_SCRIPT_1"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7893981b-6339-4f72-a850-cd6bb44637b7",
						"type": "text/javascript",
						"exec": [
							"pm.globals.set(\"index\", 339);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a089e65b-0358-40a7-8fec-59df74da026d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "GDPR Erasure",
			"item": [
				{
					"name": "Account operations",
					"item": [
						{
							"name": "Create BillingCycle",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9986c73-ca21-4f5c-858f-b5d750943095",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"CYC_INV_MT_GDPR_AO_{{index}}\",\n    \"description\": \"Monthly Invoice Cycle GDPR AO {{index}}\",\n    \"transactionDateDelay\": \"0\",\n    \"invoiceDateProductionDelay\": \"0\",\n    \"dueDateDelay\": \"2\",\n    \"invoiceDateDelay\": \"4\",\n    \"calendar\": \"MONTHLY\",\n    \"invoiceTypeCode\": \"COM\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billingCycle",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "271b93c6-bbc9-40eb-b95e-3b3bda81e42b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"crmAccountType\": \"C_UA\",\n    \"crmParentCode\": \"SELLER_FR\",\n    \"code\": \"GDPR_{{index}}\",\n    \"description\": \"Name\",\n    \"name\": {\n        \"title\": \"MR\",\n        \"firstName\": \"Edward\",\n        \"lastName\": \"Legaspi\"\n    },\n    \"address\": {\n        \"address1\": \"14 rue Crespin du Gast\",\n        \"zipCode\": \"75011\",\n        \"city\": \"PARIS\",\n        \"state\": \"Paris Area\",\n        \"country\": \"FR\"\n    },\n    \"email\": \"edward.legaspi@opencellsoft.com\",\n    \"language\": \"FRA\",\n    \"customerCategory\": \"CLIENT\",\n    \"customerBrand\": \"DEFAULT\",\n    \"currency\": \"EUR\",\n    \"billingCycle\": \"CYC_INV_MT_GDPR_AO_{{index}}\",\n    \"country\": \"FR\",\n    \"electronicBilling\": \"true\",\n    \"contactInformation\": {\n        \"email\": \"edward.legaspi@opencellsoft.com\"\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy",
										"createOrUpdateCRMAccountHierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Created sub",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "244df0cf-ecf5-4556-b75c-d27177beaf1a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB\",\n    \"userAccount\": \"GDPR_{{index}}\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate service",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c45157fd-5270-41a8-a439-f23de525fcab",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"subscriptionDate\": \"2007-10-13\",\n                \"quantity\": \"1\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Run RT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ce657b1-95ed-4134-b4cc-8ca91bbb57dd",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"RT_Job\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/job/execute",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Previous Invoice old",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f197175c-6dbe-4c88-9b00-9a71fb507535",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"targetCode\": \"GDPR_{{index}}\",\n    \"targetType\": \"BILLINGACCOUNT\",\n    \"invoicingDate\": \"2007-11-01\",\n    \"generateXML\": \"true\",\n    \"generatePDF\": \"true\",\n    \"generateAO\": \"true\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoice/generateInvoice",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoice",
										"generateInvoice"
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment for Invoice old",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f2ad07f-e001-4074-9111-37b93054c1f6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customerAccount\": \"GDPR_{{index}}\",\n    \"description\": \"Payment for ${#TestSuite#invoice1_number}\",\n    \"amount\": \"1017.10\",\n    \"unMatchingAmount\": \"1017.10\",\n    \"dueDate\": \"2007-09-01\",\n    \"type\": \"OCC\",\n    \"transactionDate\": \"2007-10-15\",\n    \"transactionCategory\": \"CREDIT\",\n    \"reference\": \"INV-CLASSIC-000000001\",\n    \"accountCode\": \"651100000\",\n    \"accountCodeClientSide\": \"651100000\",\n    \"code\": \"RG_PLVT\",\n    \"otherCreditAndCharge\": {\n        \"operationDate\": \"2007-10-15\"\n    },\n    \"matchingStatus\": \"O\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/accountOperation",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"accountOperation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Created sub 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acaa1f95-8625-4bdc-9351-90a712e61003",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB_NEW\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB_NEW\",\n    \"userAccount\": \"GDPR_{{index}}\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2017-10-13\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate service 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a69d2d5-7e71-407e-84c4-b184d6936976",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB_NEW\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"subscriptionDate\": \"2017-10-13\",\n                \"quantity\": \"1\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Run RT 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a504100-b36f-40b1-a60d-cce3cde15c7f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"RT_Job\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/job/execute",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Previous Invoice new",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb23e1e8-41eb-48fb-96b4-1d62395edeb5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"targetCode\": \"GDPR_{{index}}\",\n    \"targetType\": \"BILLINGACCOUNT\",\n    \"invoicingDate\": \"2017-11-01\",\n    \"generateXML\": \"true\",\n    \"generatePDF\": \"true\",\n    \"generateAO\": \"true\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoice/generateInvoice",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoice",
										"generateInvoice"
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment for Invoice new",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed3237f7-5afb-4c69-8c02-ae85a701a524",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customerAccount\": \"GDPR_{{index}}\",\n    \"description\": \"Payment for ${#TestSuite#invoice1_number}\",\n    \"amount\": \"1017.10\",\n    \"unMatchingAmount\": \"1017.10\",\n    \"dueDate\": \"2017-09-01\",\n    \"type\": \"OCC\",\n    \"transactionDate\": \"2017-10-15\",\n    \"transactionCategory\": \"CREDIT\",\n    \"reference\": \"INV-CLASSIC-000000001\",\n    \"accountCode\": \"651100000\",\n    \"accountCodeClientSide\": \"651100000\",\n    \"code\": \"RG_PLVT\",\n    \"otherCreditAndCharge\": {\n        \"operationDate\": \"2017-10-15\"\n    },\n    \"matchingStatus\": \"O\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/accountOperation",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"accountOperation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Undue payment 50",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "450a1764-3c5f-45f1-9ff3-3921b0eaf1ab",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"\");",
											"    pm.globals.set(\"undueRefundId\", jsonData.message);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customerAccount\": \"GDPR_{{index}}\",\n    \"description\": \"Undue payment\",\n    \"amount\": \"50\",\n    \"unMatchingAmount\": \"50\",\n    \"type\": \"OCC\",\n    \"transactionDate\": \"2007-09-30\",\n    \"transactionCategory\": \"CREDIT\",\n    \"reference\": \"NO_REF\",\n    \"code\": \"RG_CHQ\",\n    \"otherCreditAndCharge\": {\n        \"operationDate\": \"2007-09-30\"\n    },\n    \"matchingStatus\": \"O\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/accountOperation",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"accountOperation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refund 50",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1600369e-d87e-4039-b248-bc76ff379c2f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"\");",
											"    pm.globals.set(\"unduePaymentId\", jsonData.message);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customerAccount\": \"GDPR_{{index}}\",\n    \"description\": \"Refund undue payment\",\n    \"amount\": \"50\",\n    \"unMatchingAmount\": \"50\",\n    \"type\": \"OCC\",\n    \"transactionDate\": \"2007-10-31\",\n    \"transactionCategory\": \"DEBIT\",\n    \"reference\": \"NO_REF\",\n    \"code\": \"RG_CHQ\",\n    \"otherCreditAndCharge\": {\n        \"operationDate\": \"2007-10-31\"\n    },\n    \"matchingStatus\": \"O\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/accountOperation",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"accountOperation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Match Undue payment and Refund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99faacb9-2bdf-4dd5-90fc-07fa806a0714",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customerAccountCode\": \"GDPR_{{index}}\",\n    \"accountOperations\": {\n        \"accountOperation\": [\n            {\n                \"id\": {{unduePaymentId}}\n            },\n            {\n                \"id\": {{undueRefundId}}\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/accountOperation/matchOperations",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"accountOperation",
										"matchOperations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Subscription",
					"item": [
						{
							"name": "Created sub",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ca8ebb5-8b8c-490c-b3df-df226e3afb19",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_CREATED\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_CREATED\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "Active sub",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ff70d47-bec9-4e8d-9bcc-e7cb2335eaac",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ACTIVE\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ACTIVE\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate service",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9755baf8-9620-4940-8c29-2fb826c37bff",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ACTIVE\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"subscriptionDate\": \"2007-10-13\",\n                \"quantity\": \"1\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Suspended sub",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b804f0ec-4499-4f9d-86dd-2258170c19e9",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create access to suspended sub",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51d562ba-4a58-404a-a6b6-9a8e7e034436",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED_ACCESS\",\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/access",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"access"
									]
								}
							},
							"response": []
						},
						{
							"name": "Suspend sub",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c895ce55-d859-406d-974a-39847714e309",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscriptionCode\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED\",\n    \"actionDate\": \"2017-10-13\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/suspend",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"suspend"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resiliated sub",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9236a25-4fb6-40cd-8ef9-33a130c64729",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_RESILIATED\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_RESILIATED\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate service - Resiliated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f24c2df1-457c-44cb-8274-ede5940c32b3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_RESILIATED\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"subscriptionDate\": \"2007-10-13\",\n                \"quantity\": \"1\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/activateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"activateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resiliate sub",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a18e2c7-6a8e-4b4e-bf13-611ed29e2a24",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subscriptionCode\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_RESILIATED\",\n    \"terminationReason\": \"TERM_REASON_3\",\n    \"terminationDate\": \"2017-10-13\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/terminate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"terminate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order",
					"item": [
						{
							"name": "Create old order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "252176fd-288b-4ef4-b7c7-3569c3a65a89",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{entityPrefix}}_{{index}}_ORDER_OLD\",\n    \"orderDate\": \"2007-10-13T15:50:48+08:00\",\n    \"billingCycle\": \"CYC_INV_MT_3\",\n    \"orderItem\": [\n        {\n            \"id\": \"01\",\n            \"action\": \"add\",\n            \"billingAccount\": [\n                {\n                    \"id\": \"{{baseEntityPrefix}}_UA_3\"\n                }\n            ],\n            \"productOffering\": {\n                \"id\": \"{{baseEntityPrefix}}_OFFER3\"\n            },\n            \"product\": {\n                \"productCharacteristic\": [\n                    {\n                        \"name\": \"subscriptionCode\",\n                        \"value\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ORDER_OLD\"\n                    },\n                    {\n                        \"name\": \"subscriptionDate\",\n                        \"value\": \"2007-10-13T15:10:18Z\"\n                    }\n                ],\n                \"productRelationship\": [\n                    {\n                        \"type\": \"bundled\",\n                        \"product\": {\n                            \"productCharacteristic\": [\n                                {\n                                    \"name\": \"serviceCode\",\n                                    \"value\": \"{{baseEntityPrefix}}_SERVICE3\"\n                                },\n                                {\n                                    \"name\": \"quantity\",\n                                    \"value\": \"1\"\n                                },\n                                {\n                                    \"name\": \"subscriptionDate\",\n                                    \"value\": \"2007-10-13T15:36:18+08:00\"\n                                },\n                                {\n                                    \"name\": \"{{baseEntityPrefix}}_SERVICE_CF_STRING\",\n                                    \"value\": \"Service CF value\"\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/orderManagement/productOrder",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"orderManagement",
										"productOrder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ba825c8-a9fc-4251-9993-aa1a9ef63ebb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{entityPrefix}}_{{index}}_ORDER_OLD\",\n    \"orderDate\": \"2018-10-13T15:50:48+08:00\",\n    \"billingCycle\": \"CYC_INV_MT_3\",\n    \"orderItem\": [\n        {\n            \"id\": \"01\",\n            \"action\": \"add\",\n            \"billingAccount\": [\n                {\n                    \"id\": \"{{baseEntityPrefix}}_UA_3\"\n                }\n            ],\n            \"productOffering\": {\n                \"id\": \"{{baseEntityPrefix}}_OFFER3\"\n            },\n            \"product\": {\n                \"productCharacteristic\": [\n                    {\n                        \"name\": \"subscriptionCode\",\n                        \"value\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ORDER_NEW\"\n                    },\n                    {\n                        \"name\": \"subscriptionDate\",\n                        \"value\": \"2007-10-13T15:10:18Z\"\n                    }\n                ],\n                \"productRelationship\": [\n                    {\n                        \"type\": \"bundled\",\n                        \"product\": {\n                            \"productCharacteristic\": [\n                                {\n                                    \"name\": \"serviceCode\",\n                                    \"value\": \"{{baseEntityPrefix}}_SERVICE3\"\n                                },\n                                {\n                                    \"name\": \"quantity\",\n                                    \"value\": \"1\"\n                                },\n                                {\n                                    \"name\": \"subscriptionDate\",\n                                    \"value\": \"2018-10-13T15:36:18+08:00\"\n                                },\n                                {\n                                    \"name\": \"{{baseEntityPrefix}}_SERVICE_CF_STRING\",\n                                    \"value\": \"Service CF value\"\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/orderManagement/productOrder",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"orderManagement",
										"productOrder"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoice",
					"item": [
						{
							"name": "Create BillingCycle",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "961e153a-f9f8-4e8b-930f-676ebbed7a6d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"CYC_INV_MT_GDPR_{{index}}\",\n    \"description\": \"Monthly Invoice Cycle GDPR_{{index}}\",\n    \"transactionDateDelay\": \"0\",\n    \"invoiceDateProductionDelay\": \"0\",\n    \"dueDateDelay\": \"2\",\n    \"invoiceDateDelay\": \"4\",\n    \"calendar\": \"MONTHLY\",\n    \"invoiceTypeCode\": \"COM\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billingCycle",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create InvoiceType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddc85ec5-3643-4ff6-879a-6bc5ad5cd5bb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_GDPR\",\n    \"description\": \"{{entityPrefix}}_{{index}}_GDPR\",\n    \"occTemplateCode\": \"INV_STD\",\n    \"occTemplateNegativeCode\": \"PAY_TIP\",\n    \"sequenceDto\": {\n        \"prefixEL\": \"Fact_\",\n        \"sequenceSize\": \"9\",\n        \"currentInvoiceNb\": \"5000\"\n    },\n    \"appliesTo\": [\n        \"COM\"\n    ],\n    \"useSelfSequence\": \"true\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Billing Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9fe6b3c-ffe8-45e4-aa92-ab3898419676",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_BA_GDPR\",\n    \"description\": \"{{entityPrefix}}_{{index}}_BA_GDPR\",\n    \"name\": {\n        \"title\": \"MR\",\n        \"firstName\": \"Edward\",\n        \"lastName\": \"Legaspi\"\n    },\n    \"address\": {\n        \"address1\": \"adress1\",\n        \"address2\": \"address2\",\n        \"address3\": \"adress3\",\n        \"zipCode\": \"21000\",\n        \"city\": \"Dijon\",\n        \"country\": \"France\"\n    },\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA_3\",\n    \"billingCycle\": \"CYC_INV_MT_GDPR_{{index}}\",\n    \"country\": \"FR\",\n    \"language\": \"FRA\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d24654fc-daa9-4aa6-84ac-c4d1f7dcd644",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_UA_GDPR\",\n    \"description\": \"{{entityPrefix}}_{{index}}_UA_GDPR\",\n    \"billingAccount\": \"{{entityPrefix}}_{{index}}_BA_GDPR\",\n    \"name\": {\n        \"title\": \"MR\",\n        \"firstName\": \"Edward\",\n        \"lastName\": \"Legaspi\"\n    },\n    \"address\": {\n        \"address1\": \"adress1\",\n        \"address3\": \"adress3\",\n        \"zipCode\": \"21000\",\n        \"city\": \"Dijon\",\n        \"country\": \"France\"\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Created sub",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fc9a79d-f15e-424c-9774-d05fbe32ed2f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_GDPR_SUB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_GDPR_SUB\",\n    \"userAccount\": \"{{entityPrefix}}_{{index}}_UA_GDPR\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2018-08-13\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "Apply one shot",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c2a0b71-6143-4c9f-90c2-b3a265f4797c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"oneShotCharge\": \"{{baseEntityPrefix}}_OS_OTHER\",\n    \"subscription\": \"{{entityPrefix}}_{{index}}_GDPR_SUB\",\n    \"operationDate\": \"2018-08-13\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/applyOneShotChargeInstance",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"applyOneShotChargeInstance"
									]
								}
							},
							"response": []
						},
						{
							"name": "Run RT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9dff56e-abc1-4788-a134-6715b15f829a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"RT_Job\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/job/execute",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create BR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c763e5df-d625-41e7-8e78-bfbd24d5aeca",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"\");",
											"    pm.globals.set(\"billingRunId\", jsonData.message);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"billingCycleCode\": \"CYC_INV_MT_GDPR_{{index}}\",\n    \"billingRunTypeEnum\": \"AUTOMATIC\",\n    \"lastTransactionDate\": \"2018-08-31\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/invoicing/createBillingRun",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"invoicing",
										"createBillingRun"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invoicing Job",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0111f40b-e486-4685-8c7e-255d696f3a22",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"Inv_Job\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/job/execute",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate BR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "955be4a7-56c2-4a47-8728-979ece8d23ee",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "1",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/invoicing/validateBillingRun",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"invoicing",
										"validateBillingRun"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "999a9d7d-9c92-48ba-a654-666cda53ff04",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"invoiceType\": \"{{entityPrefix}}_{{index}}_GDPR\",\n    \"billingAccountCode\": \"{{entityPrefix}}_{{index}}_BA_GDPR\",\n    \"dueDate\": \"2007-10-13\",\n    \"invoiceDate\": \"2007-10-13\",\n    \"invoiceMode\": \"AGGREGATED\",\n    \"categoryInvoiceAgregate\": [\n        {\n            \"categoryInvoiceCode\": \"SUBSCRIPTION\",\n            \"description\": \"SUBSCRIPTION\",\n            \"subCategoryInvoiceAgregateDto\": [\n                {\n                    \"description\": \"SUB_DATA\",\n                    \"invoiceSubCategoryCode\": \"SUB_DATA\",\n                    \"amountWithoutTax\": \"100\",\n                    \"amountTax\": \"20\",\n                    \"amountWithTax\": \"120\",\n                    \"ratedTransaction\": [\n                        {\n                            \"code\": \"WS_BASE_OS_OTHER\",\n                            \"unitAmountWithoutTax\": \"100\",\n                            \"amountWithoutTax\": \"100\",\n                            \"quantity\": \"1\",\n                            \"description\": \"API\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoice",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoice"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GDPR",
					"item": [
						{
							"name": "Create GDPR Job",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9832ca6-8f6e-4da8-8f09-646e183c5aa7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"GDPR_Job\",\n    \"description\": \"GDPR_Job\",\n    \"jobTemplate\": \"GDPRJob\",\n    \"timerCode\": \"Monthly\",\n    \"jobCategory\": \"DWH\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"jobInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Run GDPR Job",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b896ced5-eaae-4e52-9516-547f4187889a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"GDPR_Job\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/job/execute",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"execute"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Remove base data",
			"item": [
				{
					"name": "Remove Administration",
					"item": [
						{
							"name": "find BarChart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b22bf14c-fcbf-48f8-a312-5d30227b8bef",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.chartDto.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_BC1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/chart?chartCode={{baseEntityPrefix}}_BC1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"chart"
									],
									"query": [
										{
											"key": "chartCode",
											"value": "{{baseEntityPrefix}}_BC1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "find PieChart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7595d581-b498-4700-bdf8-68c76d7ddbb8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.chartDto.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_PC1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/chart?chartCode={{baseEntityPrefix}}_PC1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"chart"
									],
									"query": [
										{
											"key": "chartCode",
											"value": "{{baseEntityPrefix}}_PC1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "find LineChart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "870e237c-4422-4262-a2bc-2afbd7d8c210",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.chartDto.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_LC1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/chart?chartCode={{baseEntityPrefix}}_LC1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"chart"
									],
									"query": [
										{
											"key": "chartCode",
											"value": "{{baseEntityPrefix}}_LC1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "find ScriptInstance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d44151c2-d173-46e5-ae01-a404ffdf0545",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.scriptInstance.code).to.eql(\"org.meveo.service.script.\"+pm.collectionVariables.get(\"baseEntityPrefix\")+\"_Script\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/scriptInstance?scriptInstanceCode=org.meveo.service.script.{{baseEntityPrefix}}_Script",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"scriptInstance"
									],
									"query": [
										{
											"key": "scriptInstanceCode",
											"value": "org.meveo.service.script.{{baseEntityPrefix}}_Script"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "find Notification",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70abbe54-1e0c-4dd7-bfc7-6cf33c1bb844",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.notificationDto.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_Notification1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/notification?notificationCode={{baseEntityPrefix}}_Notification1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"notification"
									],
									"query": [
										{
											"key": "notificationCode",
											"value": "{{baseEntityPrefix}}_Notification1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "find WebHookNotification",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b5cba1e-7b70-4b9e-a9cd-8c871ede240f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.webhookDto.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_WebHook1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/notification/webhook?notificationCode={{baseEntityPrefix}}_WebHook1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"notification",
										"webhook"
									],
									"query": [
										{
											"key": "notificationCode",
											"value": "{{baseEntityPrefix}}_WebHook1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "find EmailNotifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "270708c7-9fac-436a-a4f4-88c41cf0fb4a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.emailNotificationDto.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_EmailNotif1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findEmailNotification\": {\n        \"notificationCode\": \"{{baseEntityPrefix}}_EmailNotif1\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/notification/email?notificationCode={{baseEntityPrefix}}_EmailNotif1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"notification",
										"email"
									],
									"query": [
										{
											"key": "notificationCode",
											"value": "{{baseEntityPrefix}}_EmailNotif1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "find Timer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "abdf8e84-2dbc-4d8b-92a7-a427e2aa07c1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.timerEntity.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_Timer1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/job/timer?timerCode={{baseEntityPrefix}}_Timer1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"timer"
									],
									"query": [
										{
											"key": "timerCode",
											"value": "{{baseEntityPrefix}}_Timer1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "find JobInstance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2756d4b8-8049-479f-9e32-4a8a668d01ed",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.jobInstanceDto.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_ImpExp-Job1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findJobInstance\": {\n        \"jobInstanceCode\": \"{{baseEntityPrefix}}_ImpExp-Job1\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/jobInstance?jobInstanceCode={{baseEntityPrefix}}_ImpExp-Job1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"jobInstance"
									],
									"query": [
										{
											"key": "jobInstanceCode",
											"value": "{{baseEntityPrefix}}_ImpExp-Job1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "remove BarChart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e64f7d0e-5c04-4542-9229-c8c48ad8cc98",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/chart?chartCode={{baseEntityPrefix}}_BC1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"chart"
									],
									"query": [
										{
											"key": "chartCode",
											"value": "{{baseEntityPrefix}}_BC1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "remove PieChart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff9b764a-7826-43aa-b690-3bc40ee1b913",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/chart?chartCode={{baseEntityPrefix}}_PC1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"chart"
									],
									"query": [
										{
											"key": "chartCode",
											"value": "{{baseEntityPrefix}}_PC1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "remove LineChart",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f58fedd3-2db3-4e71-a19f-0e17fe24285e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/chart?chartCode={{baseEntityPrefix}}_LC1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"chart"
									],
									"query": [
										{
											"key": "chartCode",
											"value": "{{baseEntityPrefix}}_LC1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "remove Notification",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b175e2aa-9bf1-48c7-8fdd-518218ebdd5c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/notification/{{baseEntityPrefix}}_Notification1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"notification",
										"{{baseEntityPrefix}}_Notification1"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove WebHookNotification",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad1435fa-6507-45ef-ba68-33c2d1be57fc",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/notification/webhook/{{baseEntityPrefix}}_WebHook1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"notification",
										"webhook",
										"{{baseEntityPrefix}}_WebHook1"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove EmailNotifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2db58de8-46b4-40e3-8de7-26781b9cedbb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/notification/email/{{baseEntityPrefix}}_EmailNotif1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"notification",
										"email",
										"{{baseEntityPrefix}}_EmailNotif1"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove JobInstance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be0a5b28-fcf8-46c6-bd67-b9cb86e9ef65",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/jobInstance/{{baseEntityPrefix}}_ImpExp-Job1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"jobInstance",
										"{{baseEntityPrefix}}_ImpExp-Job1"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove Timer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99b8ac84-3749-452a-9c1c-56cb8d43aabe",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:removeTimer\": {\n        \"timerCode\": \"{{baseEntityPrefix}}_Timer1\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/job/timer/{{baseEntityPrefix}}_Timer1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"timer",
										"{{baseEntityPrefix}}_Timer1"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Remove Catalog",
					"item": [
						{
							"name": "findRecurringChargeTemplate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58597020-2140-4ffc-9a5c-846d1f4df53e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.recurringChargeTemplate.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_REC1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate?recurringChargeTemplateCode={{baseEntityPrefix}}_REC1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate"
									],
									"query": [
										{
											"key": "recurringChargeTemplateCode",
											"value": "{{baseEntityPrefix}}_REC1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "find RecurringCHargeTemplate with Calendar",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84361c0e-4ece-46e5-a997-50775a3c1931",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.recurringChargeTemplate.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_REC1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate?recurringChargeTemplateCode={{baseEntityPrefix}}_REC1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate"
									],
									"query": [
										{
											"key": "recurringChargeTemplateCode",
											"value": "{{baseEntityPrefix}}_REC1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "findOneShotChargeTemplate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aed2e2fb-4f24-4165-b1ad-88161fd16ee2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.oneShotChargeTemplate.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_OS1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate?oneShotChargeTemplateCode={{baseEntityPrefix}}_OS1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"oneShotChargeTemplate"
									],
									"query": [
										{
											"key": "oneShotChargeTemplateCode",
											"value": "{{baseEntityPrefix}}_OS1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "findUsageChargeTemplate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0f69828-74e8-4338-a530-4a0d7b9cf50f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.usageChargeTemplate.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_USAGE1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findOneShotChargeTemplate\": {\n        \"oneShotChargeTemplateCode\": \"{{baseEntityPrefix}}_OS1\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/usageChargeTemplate?usageChargeTemplateCode={{baseEntityPrefix}}_USAGE1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"usageChargeTemplate"
									],
									"query": [
										{
											"key": "usageChargeTemplateCode",
											"value": "{{baseEntityPrefix}}_USAGE1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "findServiceTemplate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2fdbeae2-a7f0-4b1d-9be6-94b9a6cb0621",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.serviceTemplate.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findServiceTemplate\": {\n        \"serviceTemplateCode\": \"{{baseEntityPrefix}}_SERVICE1\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate?serviceTemplateCode={{baseEntityPrefix}}_SERVICE1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate"
									],
									"query": [
										{
											"key": "serviceTemplateCode",
											"value": "{{baseEntityPrefix}}_SERVICE1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "findOfferTemplate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29fd2dad-33e4-4e09-b9f8-f5c8ccc73613",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.offerTemplate.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_OFFER1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{baseEntityPrefix}}_OFFER1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									],
									"query": [
										{
											"key": "offerTemplateCode",
											"value": "{{baseEntityPrefix}}_OFFER1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "findPricePlanRec",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f489048f-231e-415d-8ca6-04debf761c6a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pricePlan.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_REC1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{baseEntityPrefix}}_REC1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan"
									],
									"query": [
										{
											"key": "pricePlanCode",
											"value": "{{baseEntityPrefix}}_REC1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "findPricePlanOS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5351f18-2145-4849-ae7f-2c0525ffca2e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pricePlan.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_OS1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findPricePlan\": {\n        \"pricePlanCode\": \"{{baseEntityPrefix}}_OS1\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{baseEntityPrefix}}_OS1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan"
									],
									"query": [
										{
											"key": "pricePlanCode",
											"value": "{{baseEntityPrefix}}_OS1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "findPricePlanUC",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef7035d4-d653-42fe-8a6b-598ed9912a49",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pricePlan.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_USAGE1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{baseEntityPrefix}}_USAGE1",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan"
									],
									"query": [
										{
											"key": "pricePlanCode",
											"value": "{{baseEntityPrefix}}_USAGE1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "removeRecurringChargeTemplate 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df7b0cb5-02a2-4a1b-8167-7c8cbdd503c3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{baseEntityPrefix}}_REC2",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate",
										"{{baseEntityPrefix}}_REC2"
									]
								}
							},
							"response": []
						},
						{
							"name": "removeOneShotChargeTemplate 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4996426e-9662-4ad9-a937-ac48766b5727",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/{{baseEntityPrefix}}_OS2",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"oneShotChargeTemplate",
										"{{baseEntityPrefix}}_OS2"
									]
								}
							},
							"response": []
						},
						{
							"name": "removeUsageChargeTemplate 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b761a007-52cd-4f9d-88e4-88e61663ef9b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/usageChargeTemplate/{{baseEntityPrefix}}_USAGE2",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"usageChargeTemplate",
										"{{baseEntityPrefix}}_USAGE2"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Remove Customer accounts, subsription, access",
					"item": [
						{
							"name": "find Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fb0fb6d-69f6-425f-aba5-084f05292ae7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customer.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_CUST\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{baseEntityPrefix}}_CUST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{baseEntityPrefix}}_CUST"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "find CustomerAccount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1400b394-141b-43f9-981b-78034dc71b16",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customerAccount.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_CA\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{baseEntityPrefix}}_CA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{baseEntityPrefix}}_CA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "find BillingAccount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f538186c-ab8e-4e44-a9bc-e187660a07ea",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.billingAccount.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_BA\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{baseEntityPrefix}}_BA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{baseEntityPrefix}}_BA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "find UserAccount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac36001a-4066-4296-9aba-b6d19307e351",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.userAccount.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_UA\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findUserAccount\": {\n        \"userAccountCode\": \"{{baseEntityPrefix}}_UA\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{baseEntityPrefix}}_UA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{baseEntityPrefix}}_UA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "find Subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77e2dc3b-82f4-45be-9b0a-8db41f952465",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SUB\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{baseEntityPrefix}}_SUB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{baseEntityPrefix}}_SUB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "find Access",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2708a69b-a72f-4b04-989f-ea938df7c9ad",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.accessDto.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_ACCP\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accessCode\": \"{{baseEntityPrefix}}_ACCP\",\n    \"subscriptionCode\": \"{{baseEntityPrefix}}_SUB\",\n    \"startDate\": \"2016-06-01\",\n    \"endDate\": \"2016-06-30\"\n}\n{\n    \"accessCode\": \"{{baseEntityPrefix}}_ACCP\",\n    \"subscription\": \"{{baseEntityPrefix}}_SUB\",\n    \"startDate\": \"2016-06-01\",\n    \"endDate\": \"2016-06-30\"\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/access?accessCode={{baseEntityPrefix}}_ACCP&subscriptionCode={{baseEntityPrefix}}_SUB&startDate=2016-06-01&endDate=2016-06-30",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"access"
									],
									"query": [
										{
											"key": "accessCode",
											"value": "{{baseEntityPrefix}}_ACCP"
										},
										{
											"key": "subscriptionCode",
											"value": "{{baseEntityPrefix}}_SUB"
										},
										{
											"key": "startDate",
											"value": "2016-06-01"
										},
										{
											"key": "endDate",
											"value": "2016-06-30"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "remove Access",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3b65160-0431-42b2-8d01-071a38449a65",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:removeAccess\": {\n        \"accessCode\": \"{{baseEntityPrefix}}_ACCP\",\n        \"subscriptionCode\": \"{{baseEntityPrefix}}_SUB\",\n        \"startDate\": \"2016-06-01\",\n        \"endDate\": \"2016-06-30\"\n      }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/access/{{baseEntityPrefix}}_ACCP/{{baseEntityPrefix}}_SUB/2016-06-01/2016-06-30",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"access",
										"{{baseEntityPrefix}}_ACCP",
										"{{baseEntityPrefix}}_SUB",
										"2016-06-01",
										"2016-06-30"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Remove Script BOM, BSM, BAM",
					"item": [],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Banking Calendar and Date status",
			"item": [
				{
					"name": "Create 2017 Banking Calendar",
					"item": [
						{
							"name": "Create 2017 Banking Calendar with All Vals",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ccc0b0a-31cd-4b4f-86cf-4dea09c957e0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"FR_2017_BANKING_CALENDAR\",\n    \"description\": \"France Banking Calendar for 2017\",\n    \"calendarType\": \"BANKING\",\n    \"startDate\": \"2017-01-01\",\n    \"endDate\": \"2017-12-31\",\n    \"weekendBegin\": \"6\",\n    \"weekendEnd\": \"7\",\n    \"holidays\": [\n        {\n            \"holidayBegin\": \"101\",\n            \"holidayEnd\": \"101\"\n        },\n        {\n            \"holidayBegin\": \"414\",\n            \"holidayEnd\": \"414\"\n        },\n        {\n            \"holidayBegin\": \"417\",\n            \"holidayEnd\": \"417\"\n        },\n        {\n            \"holidayBegin\": \"501\",\n            \"holidayEnd\": \"501\"\n        },\n        {\n            \"holidayBegin\": \"1225\",\n            \"holidayEnd\": \"1226\"\n        }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Date status",
					"item": [
						{
							"name": "Saturday Date Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02fd6db5-fe59-4f30-b7bd-18e9bdb79076",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.bankingDateStatus.date).to.contains(\"2017-01-07T\");",
											"    pm.expect(jsonData.bankingDateStatus.isWorkingDate).to.eql(false);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar/bankingDateStatus?date=2017-01-07",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar",
										"bankingDateStatus"
									],
									"query": [
										{
											"key": "date",
											"value": "2017-01-07"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sunday Date Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6e3ef61-f0ce-45c4-adb4-c58823dbf952",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.bankingDateStatus.date).to.contains(\"2017-01-08T\");",
											"    pm.expect(jsonData.bankingDateStatus.isWorkingDate).to.eql(false);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar/bankingDateStatus?date=2017-01-08",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar",
										"bankingDateStatus"
									],
									"query": [
										{
											"key": "date",
											"value": "2017-01-08"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Monday Date Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ff054a3-6f87-40dd-b2d8-fafe301937a2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.bankingDateStatus.date).to.contains(\"2017-01-09T\");",
											"    pm.expect(jsonData.bankingDateStatus.isWorkingDate).to.eql(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar/bankingDateStatus?date=2017-01-09",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar",
										"bankingDateStatus"
									],
									"query": [
										{
											"key": "date",
											"value": "2017-01-09"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "New Year's Day Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f5b76ad-c5d5-4a31-b4bc-2bf22ca6bdaf",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.bankingDateStatus.date).to.contains(\"2017-01-01T\");",
											"    pm.expect(jsonData.bankingDateStatus.isWorkingDate).to.eql(false);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar/bankingDateStatus?date=2017-01-01",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar",
										"bankingDateStatus"
									],
									"query": [
										{
											"key": "date",
											"value": "2017-01-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Labor Day Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae20d314-dab2-40f1-b754-a233dc21c22c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.bankingDateStatus.date).to.contains(\"2017-05-01T\");",
											"    pm.expect(jsonData.bankingDateStatus.isWorkingDate).to.eql(false);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar/bankingDateStatus?date=2017-05-01",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar",
										"bankingDateStatus"
									],
									"query": [
										{
											"key": "date",
											"value": "2017-05-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Simple Working Date Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ad4aaf9-aeae-4ace-9566-b0c182a70724",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.bankingDateStatus.date).to.contains(\"2017-02-14T\");",
											"    pm.expect(jsonData.bankingDateStatus.isWorkingDate).to.eql(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:getBankingDateStatus\": { \"date\": \"2017-02-14\" }\n    }\n  }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar/bankingDateStatus?date=2017-02-14",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar",
										"bankingDateStatus"
									],
									"query": [
										{
											"key": "date",
											"value": "2017-02-14"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "aa8bef6f-ba65-4804-8744-18b97af4461b",
				"type": "text/javascript",
				"exec": [
					"pm.globals.set(\"inc\",1);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "fae71453-c2ca-44e5-87f8-0b8ec4c4e1e0",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "579f66b8-a04c-46bb-b45a-377a6de90d2e",
			"key": "opencell.base",
			"value": "https://baq.d2.opencell.work/opencell"
		},
		{
			"id": "54178f8b-dd1a-423b-b30d-98228583970a",
			"key": "opencell.url",
			"value": "{{opencell.base}}/api/rest"
		},
		{
			"id": "3a0b534d-c24b-417a-b19e-3feadf2c3bb4",
			"key": "opencell.username",
			"value": "opencell.admin"
		},
		{
			"id": "644bff19-14f9-4b6f-ac2d-5e114791d53f",
			"key": "opencell.password",
			"value": "opencell.admin"
		},
		{
			"id": "c46fc674-cdda-4489-a05d-da0b76f82c54",
			"key": "opencell.superusername",
			"value": "opencell.superadmin"
		},
		{
			"id": "158a00c9-e971-48d6-b919-c07f146daffd",
			"key": "opencell.superpassword",
			"value": "opencell.superadmin"
		},
		{
			"id": "58a88a05-ce72-46f6-869e-e324292c0d73",
			"key": "entityPrefix",
			"value": "RS_FULL"
		},
		{
			"id": "ed5a7124-06d8-4289-88e5-cf8c76e67dd4",
			"key": "baseEntityPrefix",
			"value": "RS_BASE"
		},
		{
			"id": "0135b0d4-71c5-4914-bacc-b4b58ba288e0",
			"key": "seller.code",
			"value": "MAIN_SELLER"
		},
		{
			"id": "0ce85520-a0fc-42c2-ae24-33498ab98855",
			"key": "template.code",
			"value": "SIMPLE"
		},
		{
			"id": "a19b6f97-2afa-4360-97f5-93065c1b20e5",
			"key": "template.label",
			"value": "Simple usage"
		},
		{
			"id": "93cbd8cf-d222-42f9-99a8-c139f2149463",
			"key": "project.code",
			"value": "SimpleUsage-001"
		},
		{
			"id": "1a9ad644-eb4f-48f2-abbe-1cfa140240ba",
			"key": "project.description",
			"value": "Simple usage offer"
		},
		{
			"id": "dfd789c8-a84b-407d-9e0f-e1132ca5b975",
			"key": "project.type",
			"value": "Setup"
		},
		{
			"id": "7cfbb713-9145-49f0-90e9-8b5ae80b1835",
			"key": "project.version",
			"value": "9.2+"
		},
		{
			"id": "8419f002-7bec-47db-9451-c30c800d3645",
			"key": "serviceId",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}